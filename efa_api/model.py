# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2023-02-10T01:20:20+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class IntType(Enum):
    ethernet = "ethernet"
    port_channel = "port-channel"


class DevicePort(BaseModel):
    int_type: Optional[IntType] = Field(
        None,
        alias="int-type",
        description="Interface type [ethernet, port-channel]",
        example="ethernet",
    )
    name: Optional[str] = Field(
        None, description="Name of the interface [0/1, 10]", example="0/1"
    )


class Device(BaseModel):
    mgmt_ip: Optional[str] = Field(
        None,
        alias="mgmt-ip",
        description="Device Management IP Address",
        example="10.25.25.100",
    )
    port: Optional[List[DevicePort]] = Field(
        None,
        description="List of physical ports of device on which tenant network will be configured",
    )


class Code(Enum):
    integer_1000 = 1000
    integer_1001 = 1001
    integer_1101 = 1101
    integer_1102 = 1102
    integer_1201 = 1201
    integer_1301 = 1301
    integer_1302 = 1302
    integer_1303 = 1303
    integer_1304 = 1304
    integer_1305 = 1305
    integer_1306 = 1306
    integer_1307 = 1307
    integer_1308 = 1308
    integer_1309 = 1309
    integer_1401 = 1401
    integer_1402 = 1402
    integer_1501 = 1501
    integer_1502 = 1502
    integer_1601 = 1601
    integer_1602 = 1602
    integer_1603 = 1603
    integer_1701 = 1701
    integer_1702 = 1702


class ErrorModel(BaseModel):
    code: Code = Field(
        ...,
        description=(
            "1000 - No Error.\n1001 - Validation Error.\n1101 - Assignment Error.\n1102 - Configuration Error.\n1201 -"
            " Device Conneciton Error.\n1301 - Database Connection Error.\n1302 - Database Get Error.\n1303 - Database"
            " Create Error.\n1304 - Database Delete Error.\n1305 - Database Update Error.\n1306 - Generate UUID"
            " Error.\n1307 - Database Inconsistent.\n1308 - Database Transaction Error.\n1309 - Database Copier"
            " Error.\n1401 - Inventory Service Connection Error.\n1402 - Inventory Service Query Error.\n1501 - Fabric"
            " Service Connection Error.\n1502 - Fabric Service Query Error.\n1601 - Message Bus Connection Error.\n1602"
            " - Message Bus Publish Error.\n1603 - Message Bus Event Handle Error.\n1701 - API Validation Error.\n1702"
            " - API Decode Error.\n"
        ),
    )
    message: str = Field(..., description="Describing the reason of failure")


class Type(Enum):
    shared = "shared"
    private = "private"


class Tenant(BaseModel):
    id: Optional[int] = Field(
        None,
        description="Unique ID of the Tenant generated by the service. User API can not pass this for create operation",
        example=1,
    )
    name: str = Field(..., description="Unique name of the tenant", example="Tenant-A")
    description: Optional[str] = Field(
        None, description="Description about tenant", example="Tenant-A's Description"
    )
    l2_vni_range: Optional[str] = Field(
        None,
        alias="l2-vni-range",
        description=(
            "Contiguous Range of L2 VNIs in ascending order will be reserved for the tenant within the scope of a"
            " fabric. L2 networks will consume the VNIs from this range."
        ),
        example="1-100",
    )
    l3_vni_range: Optional[str] = Field(
        None,
        alias="l3-vni-range",
        description=(
            "Contiguous Range of L3 VNIs in ascending order will be reserved for the tenant within the scope of a"
            " fabric. L3 networks will consume the VNIs from this range."
        ),
        example="4096-5000",
    )
    vlan_range: Optional[str] = Field(
        None,
        alias="vlan-range",
        description="Range of VLANs to reserve for the tenant",
        example="10-20,50-60",
    )
    num_of_vrf: Optional[int] = Field(
        None,
        alias="num-of-vrf",
        description="Number of VRFs to reserve for the tenant",
        example=20,
    )
    enable_bd: Optional[bool] = Field(
        None,
        alias="enable-bd",
        description="Enable bridge-domain so that overlapping vlans can be supported",
        example=True,
    )
    type: Optional[Type] = Field(
        None,
        description="POs or VRFs of shared tenant are available to other tenants. Default tenant type is private.",
        example="shared | private",
    )
    port_list: Optional[List[Device]] = Field(
        None, alias="port-list", unique_items=True
    )
    mirror_destination_port_list: Optional[List[Device]] = Field(
        None, alias="mirror-destination-port-list", unique_items=True
    )


class Operation(Enum):
    desc_update = "desc-update"
    vni_update = "vni-update"
    port_add = "port-add"
    port_delete = "port-delete"
    vlan_add = "vlan-add"
    vlan_delete = "vlan-delete"
    vlan_update = "vlan-update"
    num_vrf_update = "num-vrf-update"
    enable_bd_update = "enable-bd-update"


class TenantUpdate(BaseModel):
    operation: Operation = Field(
        ...,
        description="Add, delete or update tenant configuration",
        example=(
            "desc-update | vni-update | port-add | port-delete | vlan-add | vlan-delete | vlan-update | num-vrf-update"
            " | enable-bd-update"
        ),
    )
    force: Optional[bool] = Field(
        None,
        description="Force option which is valid only for port-delete operation is deprecated.",
    )
    tenant: Optional[Tenant] = None


class TenantList(BaseModel):
    tenant: Optional[List[Tenant]] = None
