{
  "openapi": "3.0.3",
  "info": {
    "title": "Tenant Service",
    "description": "This is the spec that defines the APIs provided by the tenant service to create a tenant and add the networks to the tenant, configure network parameters and configure switches with the tenant network's specific configurations.",
    "version": "2.7.0",
    "contact": {
      "name": "Extreme Networks",
      "url": "http://www.extremenetworks.com",
      "email": "support@extremenetworks.com"
    },
    "license": {
      "name": "Apache license",
      "url": "http://www.extremenetworks.com"
    }
  },
  "servers": [
    {
      "url": "http://gotenant-service:8083/v1/tenant"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "getHealth",
        "description": "This API helps to get the health of the Tenant service",
        "operationId": "GetHealth",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              }
            }
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "getTenants",
        "description": "This API helps to get all tenants configured with tenant service",
        "operationId": "getTenants",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantList"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/tenant": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "getTenant",
        "description": "This API helps to get the specified Tenant details",
        "operationId": "getTenant",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the tenant to retrieve details",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Tenant with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Tenant with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "createTenant",
        "description": "This API helps to create a tenant and reserve resources like Physical Ports, L2VNI, L3VNI, VLAN and Number of VRFs for the tenant. Tenant Name must be a unique key while creating a tenant with the tenant service.",
        "operationId": "createTenant",
        "tags": [
          "Tenant"
        ],
        "requestBody": {
          "description": "Create a new tenant",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Tenant with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tenant"
        ],
        "summary": "deleteTenant",
        "description": "This API helps to delete the tenant if no tenant network is created by this tenant. If it has any tenant network, a force option is required to delete this tenant. The delete request with force parameter will trigger a delete operation for all its networks.",
        "operationId": "deleteTenant",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the tenant to delete",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Use force parameter to remove the tenant forcefully. This will remove the relevant configurations from the devices for its tenant network and delete the relevant record with tenant service.",
            "schema": {
              "type": "boolean",
              "x-exportParamName": "Force"
            },
            "x-exportParamName": "Force"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Tenant with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Tenant with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/tenant/{tenant_name}": {
      "put": {
        "summary": "updateTenant",
        "description": "This API helps to update existing tenant for non-conflicting changes of its resources like L2VNI, L3VNI, vlan range, port, number of vrf, description, type etc for the tenant.",
        "operationId": "updateTenant",
        "tags": [
          "Tenant"
        ],
        "parameters": [
          {
            "name": "tenant_name",
            "in": "path",
            "required": true,
            "description": "Name of the tenant to update parameter",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "requestBody": {
          "description": "Update the Tenant parameter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Tenant with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Tenant with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/portchannels": {
      "get": {
        "summary": "getPortchannels",
        "description": "This API helps to get all Portchannels configured with Tenant service",
        "operationId": "getPortchannels",
        "tags": [
          "Port Channel"
        ],
        "parameters": [
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this Portchannel belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortChannelList"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/portchannel": {
      "get": {
        "summary": "getPortchannel",
        "description": "This API helps to get the specified Portchannel details",
        "operationId": "getPortchannel",
        "tags": [
          "Port Channel"
        ],
        "parameters": [
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Unique name of the Portchannel to fetch",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Nme"
          },
          {
            "name": "tenant_name",
            "required": false,
            "in": "query",
            "description": "Tenant to which this Portchannel belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          },
          {
            "name": "po_id",
            "in": "query",
            "description": "Filter by Portchannel id allocated on device. This should be combined with device_ip param.",
            "schema": {
              "type": "string",
              "x-exportParamName": "PoId"
            },
            "x-exportParamName": "PoId"
          },
          {
            "name": "device_ip",
            "in": "query",
            "description": "Device Management IP Address to which the po_id belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "DeviceIp"
            },
            "x-exportParamName": "DeviceIp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortChannel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Portchannel with the specified ID or number is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "createPortchannel",
        "description": "This API helps to create a new Portchannel",
        "operationId": "createPortchannel",
        "tags": [
          "Port Channel"
        ],
        "requestBody": {
          "description": "Create Port-channel parameter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortChannel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortChannel"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Portchannel with the specified Number already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "deletePortchannel",
        "description": "This API helps to delete the given Portchannel",
        "operationId": "deletePortchannel",
        "tags": [
          "Port Channel"
        ],
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name",
            "description": "Unique name of the Portchannel to delete"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Use force parameter to remove the tenant network forcefully. This will remove the relevant configurations from the devices in this tenant network and update the record with tenant service.",
            "schema": {
              "type": "boolean",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this Portchannel belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortChannel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Portchannel with the specified ID or number is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Portchannel with the specified Number already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "updatePortchannel",
        "description": "This API helps to update the parameters of the Portchannel",
        "operationId": "updatePortchannel",
        "tags": [
          "Port Channel"
        ],
        "requestBody": {
          "description": "Update the Port-channel parameter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortChannelUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortChannel"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Port-channel with the specified ID or number is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Portchannel with the specified Number already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/portchannel/configure": {
      "post": {
        "summary": "configurePortchannel",
        "description": "This API helps to configure the given Portchannel",
        "operationId": "configurePortchannel",
        "tags": [
          "Port Channel"
        ],
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the Portchannel to configure",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this Portchannel belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortChannel"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Portchannel with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Portchannel with the specified Number already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/vrfs": {
      "get": {
        "tags": [
          "Vrf"
        ],
        "summary": "getVrfs",
        "description": "This API helps to get all Vrfs configured with tenant service",
        "operationId": "getVrfs",
        "parameters": [
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this Vrf belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VrfCreate"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/vrf": {
      "get": {
        "tags": [
          "Vrf"
        ],
        "summary": "getVrf",
        "description": "This API helps to get specified Vrf details",
        "operationId": "getVrf",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Vrf name to delete",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this Vrf belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vrf"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Vrf with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Vrf with the specified Number already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "createVrf",
        "description": "This API helps to create a new Vrf for a tenant",
        "operationId": "createVrf",
        "tags": [
          "Vrf"
        ],
        "requestBody": {
          "description": "Create Vrf",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VrfCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VrfCreate"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Vrf with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "deleteVrf",
        "description": "This API helps to delete the given Vrf",
        "operationId": "deleteVrf",
        "tags": [
          "Vrf"
        ],
        "requestBody": {
          "description": "Delete Vrf.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VrfDelete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VrfCreate"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Vrf with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Vrf with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "updateVrf",
        "description": "This API helps to update the parameters of the Vrf",
        "operationId": "updateVrf",
        "tags": [
          "Vrf"
        ],
        "requestBody": {
          "description": "Update the Vrf parameter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VrfUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vrf"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Vrf with specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Vrf with the specified Number already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/vrf/errors": {
      "get": {
        "tags": [
          "Vrf Error"
        ],
        "summary": "getVrfError",
        "description": "This API helps to fetch Vrf errors",
        "operationId": "getVrfError",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the Vrf to retrieve errors",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this Vrf belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VrfWithError"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Vrf with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Vrf with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/endpointgroups": {
      "get": {
        "tags": [
          "Endpoint Group"
        ],
        "summary": "getEndpointGroups",
        "description": "This API helps to get all EndpointGroups configured with tenant service",
        "operationId": "getEndpointGroups",
        "parameters": [
          {
            "name": "tenant_name",
            "in": "query",
            "description": "Tenant to which this EndpointGroup belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointGroupListWithoutErorr"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/endpointgroup": {
      "post": {
        "summary": "createEndpointGroup",
        "description": "This API helps to create EndpointGroup which is a collection of ports and Portchannels on which a tenant can apply policies - port-property and network-policy. The validation includes that the port should belong to only one fabric. The parameters like ctag, swithport mode must be non-conflicting.",
        "operationId": "createEndpointGroup",
        "tags": [
          "Endpoint Group"
        ],
        "requestBody": {
          "description": "Create EndpointGroup",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointGroupCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointGroupCreate"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "EndpointGroup with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Endpoint Group"
        ],
        "summary": "getEndpointGroup",
        "description": "This API helps to fetch the configured details and not the operational state of the ports belonging to this EndpointGroup",
        "operationId": "getEndpointGroup",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the EndpointGroup to retrieve",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this EndpointGroup belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointGroupWithoutError"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "EndpointGroup with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "EndpointGroup with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Endpoint Group"
        ],
        "summary": "deleteEndpointGroup",
        "description": "This API helps to delete the endpoint if EndpointGroup is not attached to a tenant network. If it is attached to a tenant network then a force option is required to delete this EndpointGroup. The delete request with force parameter will trigger a delete operation for the network to which this EndpointGroup was attached.",
        "operationId": "deleteEndpointGroup",
        "requestBody": {
          "description": "Delete end point group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointGroupDelete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointGroupDelete"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "EndpointGroup with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "EndpointGroup with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/endpointgroup/errors": {
      "get": {
        "tags": [
          "Endpoint Group Error"
        ],
        "summary": "getEndpointGroupError",
        "description": "This API helps to fetch EndpointGroup errors",
        "operationId": "getEndpointGroupError",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the EndpointGroup to retrieve errors",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this EndpointGroup belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointGroupWithError"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "EndpointGroup with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "EndpointGroup with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/endpointgroup/port-group": {
      "patch": {
        "summary": "updateEndpointGroupPortGroup",
        "description": "This API helps in addition of new port(s) and/or Portchannel(s) to EndpointGroup or deletion of port(s) and/or Portchannel(s) from EndpointGroup. If the EndpointGroup is linked to any tenant network, the newly added port or Portchannel will become the part of the tenant network and its appropriate L2/L3 configurations will be applied on the newly added port, Portchannel and record will be updated with tenant automation service. For deleted port and/or Portchannel from EndpointGroup, appropriate configurations will be removed from the device and record will be updated with tenant automation service.",
        "operationId": "updateEndpointGroupPortGroup",
        "tags": [
          "Endpoint Group"
        ],
        "requestBody": {
          "description": "Update the EndpointGroup PortGroup",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointGroupPortGroupUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointGroupList"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "EndpointGroup with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "EndpointGroup with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/endpointgroup/network-policy": {
      "patch": {
        "summary": "updateEndpointGroupNetworkPolicy",
        "description": "This API helps in updating networks belonging to EndpointGroups. Below operations are supported -\n 1. ctag-range-add: Add provided l2/l3 network(s) to EndpointGroup.\n 2. ctag-range-delete: Delete provided l2/l3 network(s) from the EndpointGroup. \n 3. vrf-add: Attach the networks to the provided Vrf. Required parameters like anycast for each network should be provided in network-properties block.\n 4. vrf-delete: Migrate L3 networks to L2 networks. This operation doesn't expect any other parameters other than operation itself.\n",
        "operationId": "updateEndpointGroupNetworkPolicy",
        "tags": [
          "Endpoint Group"
        ],
        "requestBody": {
          "description": "Update the EndpointGroup NetworkPolicy",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointGroupNetworkPolicyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointGroup"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "EndpointGroup with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "EndpointGroup with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/endpointgroup/network-policy/network-property": {
      "patch": {
        "summary": "updateEndpointGroupNetworkProperty",
        "description": "This API helps in updating properties of the networks belonging to the EndpointGroups. Below operation are supported -\n 1. local-ip-add: Configure local ip v4/v6 to Ve Interface of the network.\n 2. local-ip-delete: De-Configure local ip v4/v6 from Ve Interface of the network. For local-ip-delete without specifying payload will deconfigure local-ip from all the nodes which has local-ip configured.\n 3. anycast-ip-add: Configure anycast ip v4/v6 to Ve Interface of the network.\n 4. anycast-ip-delete: De-Configure anycast ip v4/v6 from Ve Interface of the network.\n",
        "operationId": "updateEndpointGroupNetworkProperty",
        "tags": [
          "Endpoint Group"
        ],
        "requestBody": {
          "description": "Update the EndpointGroup NetworkProperty",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointGroupNetworkPropertyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointGroup"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "EndpointGroup with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "EndpointGroup with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/endpointgroup/detach-network": {
      "post": {
        "summary": "detachNetworkFromEndpointGroup",
        "description": "This API helps user to split network or range of networks from the EndpointGroup into another EndpointGroup for allowing user to do operations on the newly created EndpointGroup",
        "operationId": "detachNetworkFromEndpointGroup",
        "tags": [
          "Endpoint Group"
        ],
        "requestBody": {
          "description": "Detach EndpointGroup",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointGroupDetach"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointGroup"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "EndpointGroup with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/endpointgroup/configure": {
      "post": {
        "summary": "configureEndpointGroup",
        "description": "This API helps to configure EndpointGroup",
        "operationId": "configureEndpointGroup",
        "tags": [
          "Endpoint Group"
        ],
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the EndpointGroup to configure",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this EndpointGroup belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointGroupWithError"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "EndpointGroup with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "EndpointGroup with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/bgp/service/peer-groups": {
      "get": {
        "tags": [
          "BGP Service"
        ],
        "summary": "getBgpServicePeerGroups",
        "description": "This API helps to get all BGP Peer-Group configured with tenant service",
        "operationId": "getBgpServicePeerGroups",
        "parameters": [
          {
            "name": "tenant_name",
            "in": "query",
            "description": "Tenant to which this BGP Peer-Group belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpServicePeerGroupConfigList"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP with name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/bgp/service/peer-group": {
      "post": {
        "summary": "createBgpServicePeerGroup",
        "description": "This API helps to create BGP Peer-Group which is a collection of BGP Peer-Group configuration done on router bgp instance of a device",
        "operationId": "createBgpServicePeerGroup",
        "tags": [
          "BGP Service"
        ],
        "requestBody": {
          "description": "Create BGP Peer-Group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BgpServicePeerGroupConfigList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpServicePeerGroupConfigList"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP Peer-Group with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Validation or Device Config error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "updateBgpServicePeerGroup",
        "description": "This API helps to add and delete of BGP Peer-Group config on router bgp instance on device(s). Below operation are supported -\n 1. peer-group-add: Add Peer-Group configuration on router bgp instance of the device.\n 2. peer-group-delete: Delete Peer-Group configuration for the specified router bgp instance from the device.\n 3. desc-update: Update the description BGP Peer-Group.\n",
        "operationId": "updateBgpServicePeerGroup",
        "tags": [
          "BGP Service"
        ],
        "requestBody": {
          "description": "Update BGP Service.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BGPServicePeerGroupConfigUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpServicePeerGroup"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "BGP Peer-Group with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP Peer-Group with name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BGP Service"
        ],
        "summary": "deleteBgpServicePeerGroup",
        "description": "This API helps to delete the BGP Peer-Group",
        "operationId": "deleteBgpServicePeerGroup",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the BGP Peer-Group to delete",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this BGP Peer-Group belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Use force parameter to remove the BGP Peer-Group forcefully. This will remove the relevant configurations from the devices by ignoring errors during deletion or in case of device not reachable. Some configuration may be left on the device if force de-configuration fails.",
            "schema": {
              "type": "boolean",
              "x-exportParamName": "Force"
            },
            "x-exportParamName": "Force"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpServicePeerGroup"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "BGP Peer-Group with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP Peer-Group with name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "BGP Service"
        ],
        "summary": "getBgpServicePeerGroup",
        "description": "This API helps to fetch the configured details of the peer-config belonging to this BGP Service",
        "operationId": "getBgpServicePeerGroup",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the BGP Peer-Group to retrieve",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this BGP Peer-Group belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpServicePeerGroup"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "BGP Peer-Group with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP Peer-Group with name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/bgp/service/peer-group/configure": {
      "post": {
        "summary": "configureBgpServicePeerGroup",
        "description": "This API helps to configure BGP Peer-Group",
        "operationId": "configureBgpServicePeerGroup",
        "tags": [
          "BGP Service"
        ],
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the BGP Peer-Group to configure",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this BGP Peer-Group belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpServicePeerGroup"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "BGP Peer-Group with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP Peer-Group with name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/bgp/service/peers": {
      "get": {
        "tags": [
          "BGP Service"
        ],
        "summary": "getBgpPeers",
        "description": "This API helps to get all BGP Peer configured with tenant service",
        "operationId": "getBgpPeers",
        "parameters": [
          {
            "name": "tenant_name",
            "in": "query",
            "description": "Tenant to which this BGP Peer-Group belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BGPPeerList"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP Peer with name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/bgp/service/peer": {
      "post": {
        "summary": "creatBgpPeer",
        "description": "This API helps to create BGP Peer which is a collection of BGP Peer configuration done on router bgp instance of a device for a provided Vrf. This provides the means to extend networks created by EndpointGroup to establish bgp session with its peer towards the external gateway and compute.",
        "operationId": "createBgpPeer",
        "tags": [
          "BGP Service"
        ],
        "requestBody": {
          "description": "Create BGP Peer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BGPPeerList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BGPPeerList"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP Peer with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Validation or Device Config error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "updateBgpPeer",
        "description": "This API helps to add and delete of BGP Peer config on a Vrf for device(s). Below operation are supported -\n 1. peer-add: Add neighbor configuration for the specified Vrf on device of BGP Peer.\n 2. peer-delete: Add neighbor configuration for the specified Vrf on device of BGP Peer.\n 3. desc-update: Update the description BGP Peer.\n",
        "operationId": "updateBgpPeer",
        "tags": [
          "BGP Service"
        ],
        "requestBody": {
          "description": "Update the BGP Peer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BgpPeerUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpPeer"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "BGP Peer with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP Peer with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BGP Service"
        ],
        "summary": "deleteBgpPeer",
        "description": "This API helps to delete the BGP Peer",
        "operationId": "deleteBgpPeer",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the BGP Peer to delete",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this BGP Peer belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Use force parameter to remove the BGP Peer forcefully. This will remove the relevant configurations from the devices by ignoring errors during deletion or in case of device not reachable. Some configuration may be left on the device if force de-configuration fails.",
            "schema": {
              "type": "boolean",
              "x-exportParamName": "Force"
            },
            "x-exportParamName": "Force"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpPeer"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "BGP Peer with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP Peer with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "BGP Service"
        ],
        "summary": "getBgpPeer",
        "description": "This API helps to fetch the configured details state of the peer-config belonging to this BGP Service",
        "operationId": "getBgpPeer",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the BGP Peer to retrieve",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this BGP Peer belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpPeer"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "BGP Peer with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP Peer with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/bgp/service/peer/configure": {
      "post": {
        "summary": "configureBgpPeer",
        "description": "This API helps to configure BGP Peer",
        "operationId": "configureBgpPeer",
        "tags": [
          "BGP Service"
        ],
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the BGP Peer to configure",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this BGP Peer belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpPeer"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input param",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "BGP Peer with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "BGP Peer with the specified Name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/bgp/service/peer/operational": {
      "get": {
        "tags": [
          "BGP Service"
        ],
        "summary": "getOperationalBgpPeer",
        "description": "This API helps to fetch the operational details state of the peer-config belonging to this BGP Service",
        "operationId": "getOperationalBgpPeer",
        "parameters": [
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this BGP Peer belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          },
          {
            "name": "vrf_name",
            "required": false,
            "in": "query",
            "description": "Name of the Vrf",
            "schema": {
              "type": "string",
              "x-exportParamName": "VrfName"
            },
            "x-exportParamName": "VrfName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationalBgpPeerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "BGP Peer details with the specified Device IP Address is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/mirror/service/sessions": {
      "get": {
        "tags": [
          "Mirror Service"
        ],
        "summary": "getMirrorServiceSessions",
        "description": "This API helps to get all the Mirror Service Session owned by a given tenant.",
        "operationId": "getMirrorServiceSessions",
        "parameters": [
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this Mirror Service Session belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MirrorServiceSessionList"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/mirror/service/session": {
      "post": {
        "summary": "createMirrorServiceSession",
        "description": "This API helps to create Mirror Service Session.",
        "operationId": "createMirrorServiceSession",
        "tags": [
          "Mirror Service"
        ],
        "requestBody": {
          "description": "Create Mirror Service Session",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MirrorServiceSessionList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MirrorServiceSessionList"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Mirror Service Session with specified name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Validation or Device Config error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Mirror Service"
        ],
        "summary": "deleteMirrorServiceSession",
        "description": "This API helps to delete the Mirror Service Session.",
        "operationId": "deleteMirrorServiceSession",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the Mirror Service Session to delete",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this Mirror Service Session belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Use force parameter to remove the Mirror Service Session forcefully. This will remove the relevant configurations from the devices. However, configuration can remain on device if request fail due to device connectivity issues or any other failure",
            "schema": {
              "type": "boolean",
              "x-exportParamName": "Force"
            },
            "x-exportParamName": "Force"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MirrorServiceSession"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Mirror Service Session with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Mirror Service Session with name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Mirror Service"
        ],
        "summary": "getMirrorServiceSession",
        "description": "This API helps to fetch the configuration details of the sessions belonging to this Mirror Service Session",
        "operationId": "getMirrorServiceSession",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the Mirror Service Session to retrieve",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this Mirror Service Session belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MirrorServiceSession"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Mirror Service Session with specified name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/mirror/service/session/configure": {
      "post": {
        "summary": "configureMirrorServiceSession",
        "description": "This API helps to configure the given Mirror Service Session",
        "operationId": "configureMirrorServiceSession",
        "tags": [
          "Mirror Service"
        ],
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name of the Mirror Service Session to configure",
            "schema": {
              "type": "string",
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Name"
          },
          {
            "name": "tenant_name",
            "required": true,
            "in": "query",
            "description": "Tenant to which this Mirror Service Session belongs",
            "schema": {
              "type": "string",
              "x-exportParamName": "TenantName"
            },
            "x-exportParamName": "TenantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MirrorServiceSession"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Mirror Service Session with the specified Name is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Mirror Service Session with name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/execution": {
      "get": {
        "tags": [
          "Trouble Shooting"
        ],
        "summary": "getExecutionDetail",
        "description": "This API helps to get the detailed output of the given execution ID",
        "operationId": "ExecutionGet",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Detailed output of the given execution ID",
            "required": true,
            "schema": {
              "type": "string",
              "x-exportParamName": "Id"
            },
            "x-exportParamName": "Id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/executions": {
      "get": {
        "tags": [
          "Trouble Shooting"
        ],
        "summary": "getExecutionList",
        "description": "This API helps to get the list of all the previous executions",
        "operationId": "ExecutionList",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of executions that will be sent in the response. Default is 10",
            "required": true,
            "schema": {
              "type": "integer",
              "default": 10,
              "x-exportParamName": "Limit"
            },
            "x-exportParamName": "Limit"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter the executions based on the status(failed/succeeded/all)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all",
              "x-exportParamName": "Status"
            },
            "x-exportParamName": "Status"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Trouble Shooting"
        ],
        "summary": "deleteExecutions",
        "description": "This API helps to delete the execution older than specific number of days",
        "operationId": "deleteExecutions",
        "parameters": [
          {
            "name": "days_older_by",
            "in": "query",
            "description": "Deletes execution entries older than specified number of days",
            "required": true,
            "schema": {
              "type": "integer",
              "x-exportParamName": "DaysOlderBy",
              "default": 30
            },
            "x-exportParamName": "DaysOlderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Execution logs with the specified dates is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/runningConfig": {
      "get": {
        "tags": [
          "Trouble Shooting"
        ],
        "summary": "GetRunningConfig",
        "description": "This API helps to get the list of all CLIs in Running Config",
        "operationId": "GetRunningConfig",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunningConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/eventhistories": {
      "get": {
        "tags": [
          "Trouble Shooting"
        ],
        "summary": "getEventHistoryList",
        "description": "This API helps to get the list of all the event histories",
        "operationId": "EventHistoryList",
        "parameters": [
          {
            "name": "execution_uuid",
            "in": "query",
            "description": "Execution UUID for filtering",
            "required": false,
            "schema": {
              "type": "string",
              "x-exportParamName": "ExecutionUuid"
            },
            "x-exportParamName": "ExecutionUuid"
          },
          {
            "name": "device_ip",
            "in": "query",
            "description": "Device IP for filtering",
            "required": false,
            "schema": {
              "type": "string",
              "x-exportParamName": "DeviceIp"
            },
            "x-exportParamName": "DeviceIp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventHistoryiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/debug": {
      "post": {
        "summary": "setDebug",
        "description": "This API helps to set Debug Level for modules",
        "operationId": "handleDebug",
        "tags": [
          "Debug"
        ],
        "parameters": [
          {
            "name": "debug_level",
            "in": "query",
            "description": "Set debug level. If empty reset to default level (info).",
            "schema": {
              "type": "string",
              "x-exportParamName": "DebugLevel"
            },
            "x-exportParamName": "DebugLevel"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/debug/device/config/sync": {
      "post": {
        "tags": [
          "Debug"
        ],
        "summary": "deviceInventorySync",
        "description": "This API helps to sync devices for the given Device IP Addresses with inventory",
        "operationId": "DeviceInventorySync",
        "parameters": [
          {
            "name": "device_ips",
            "in": "query",
            "description": "Device Management IP Addresses to sync with inventory",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-exportParamName": "DeviceIps",
              "minItems": 1,
              "uniqueItems": true
            },
            "x-exportParamName": "DeviceIps"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceResponse"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partial success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Devices with the specified IP Address is not found"
          },
          "500": {
            "description": "Unexpected error"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/debug/device/config/drift": {
      "post": {
        "summary": "deviceConfigDriftReconcile",
        "description": "This API helps to generate the config-drift between EFA intended configuration and device configuration. If reconcile flag is set then generated config-drift will be pushed to the device.",
        "operationId": "debugDeviceConfigDrift",
        "tags": [
          "Debug"
        ],
        "parameters": [
          {
            "name": "device_ip",
            "required": true,
            "in": "query",
            "description": "Device Management IP Address for which config drift will be generated",
            "schema": {
              "type": "string",
              "x-exportParamName": "DeviceIp"
            },
            "x-exportParamName": "DeviceIp"
          },
          {
            "name": "reconcile",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean",
              "x-exportParamName": "Reconcile"
            },
            "description": "If flag is set to true, then generated config-drift will be pushed to the device",
            "x-exportParamName": "Reconcile"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriftReconciliationModel"
                }
              }
            }
          },
          "400": {
            "description": "Request has invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Configuration to reconcile with specified drift already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/debug/lock": {
      "get": {
        "summary": "Get lock detail",
        "description": "This API helps user to get lock details",
        "operationId": "getLocks",
        "tags": [
          "Debug"
        ],
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Object type for locks to show",
            "schema": {
              "type": "string",
              "enum": [
                "service",
                "device",
                "port",
                "vlan",
                "vrf",
                "epg"
              ],
              "x-exportParamName": "Name"
            },
            "x-exportParamName": "Nme"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockList"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Locks with object type not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorModel": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "description": "1000 - No Error.\n1001 - Validation Error.\n1101 - Assignment Error.\n1102 - Configuration Error.\n1201 - Device Conneciton Error.\n1301 - Database Connection Error.\n1302 - Database Get Error.\n1303 - Database Create Error.\n1304 - Database Delete Error.\n1305 - Database Update Error.\n1306 - Generate UUID Error.\n1307 - Database Inconsistent.\n1308 - Database Transaction Error.\n1309 - Database Copier Error.\n1401 - Inventory Service Connection Error.\n1402 - Inventory Service Query Error.\n1501 - Fabric Service Connection Error.\n1502 - Fabric Service Query Error.\n1601 - Message Bus Connection Error.\n1602 - Message Bus Publish Error.\n1603 - Message Bus Event Handle Error.\n1701 - API Validation Error.\n1702 - API Decode Error.\n",
            "enum": [
              1000,
              1001,
              1101,
              1102,
              1201,
              1301,
              1302,
              1303,
              1304,
              1305,
              1306,
              1307,
              1308,
              1309,
              1401,
              1402,
              1501,
              1502,
              1601,
              1602,
              1603,
              1701,
              1702
            ]
          },
          "message": {
            "type": "string",
            "description": "Describing the reason of failure"
          }
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Job Identifier for asynchronous request.",
            "example": 101
          },
          "state": {
            "type": "string",
            "enum": [
              "job-in-progress",
              "job-succeeded",
              "job-failed"
            ],
            "description": "Job State.",
            "readOnly": true
          }
        }
      },
      "DevicePort": {
        "type": "object",
        "properties": {
          "int-type": {
            "type": "string",
            "enum": [
              "ethernet",
              "port-channel"
            ],
            "description": "Interface type [ethernet, port-channel]",
            "example": "ethernet"
          },
          "name": {
            "type": "string",
            "uniqueItems": true,
            "description": "Name of the interface [0/1, 10]",
            "example": "0/1"
          }
        }
      },
      "Device": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "description": "Device Management IP Address",
            "example": "10.25.25.100"
          },
          "port": {
            "type": "array",
            "description": "List of physical ports of device on which tenant network will be configured",
            "items": {
              "$ref": "#/components/schemas/DevicePort"
            }
          }
        }
      },
      "EpgDevice": {
        "type": "object",
        "properties": {
          "mgmtIp": {
            "type": "string",
            "description": "Device IP",
            "example": "10.37.18.222"
          },
          "port": {
            "type": "array",
            "description": "List of physical ports of device on which tenant network will be configured",
            "items": {
              "$ref": "#/components/schemas/DevicePort"
            }
          },
          "veName": {
            "type": "string",
            "description": "Ve name"
          },
          "bridgeDomainName": {
            "type": "string",
            "description": "Bridge domain name"
          }
        }
      },
      "Tenant": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ID of the Tenant generated by the service. User API can not pass this for create operation",
            "example": 1,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Unique name of the tenant",
            "example": "Tenant-A"
          },
          "description": {
            "type": "string",
            "description": "Description about tenant",
            "example": "Tenant-A's Description"
          },
          "l2-vni-range": {
            "type": "string",
            "description": "Contiguous Range of L2 VNIs in ascending order will be reserved for the tenant within the scope of a fabric. L2 networks will consume the VNIs from this range.",
            "example": "1-100"
          },
          "l3-vni-range": {
            "type": "string",
            "description": "Contiguous Range of L3 VNIs in ascending order will be reserved for the tenant within the scope of a fabric. L3 networks will consume the VNIs from this range.",
            "example": "4096-5000"
          },
          "vlan-range": {
            "type": "string",
            "description": "Range of VLANs to reserve for the tenant",
            "example": "10-20,50-60"
          },
          "num-of-vrf": {
            "type": "integer",
            "description": "Number of VRFs to reserve for the tenant",
            "example": 20
          },
          "enable-bd": {
            "type": "boolean",
            "description": "Enable bridge-domain so that overlapping vlans can be supported",
            "example": true
          },
          "type": {
            "type": "string",
            "enum": [
              "shared",
              "private"
            ],
            "description": "POs or VRFs of shared tenant are available to other tenants. Default tenant type is private.",
            "example": "shared | private"
          },
          "port-list": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "mirror-destination-port-list": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          }
        }
      },
      "TenantUpdate": {
        "type": "object",
        "required": [
          "name",
          "operation"
        ],
        "properties": {
          "operation": {
            "type": "string",
            "enum": [
              "desc-update",
              "vni-update",
              "port-add",
              "port-delete",
              "vlan-add",
              "vlan-delete",
              "vlan-update",
              "num-vrf-update",
              "enable-bd-update"
            ],
            "description": "Add, delete or update tenant configuration",
            "example": "desc-update | vni-update | port-add | port-delete | vlan-add | vlan-delete | vlan-update | num-vrf-update | enable-bd-update"
          },
          "force": {
            "type": "boolean",
            "description": "Force option which is valid only for port-delete operation is deprecated."
          },
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          }
        }
      },
      "TenantList": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tenant"
            }
          }
        }
      },
      "EndpointGroupDelete": {
        "type": "object",
        "required": [
          "tenant_name",
          "endpoint-group-list"
        ],
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "force": {
            "type": "boolean",
            "description": "Set to true if EndpointGroup delete will require deconfiguring networks also"
          },
          "endpoint-group-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointGroupName"
            }
          }
        }
      },
      "EndpointGroupName": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "EndpointGroup Name",
            "example": "EPG-1"
          }
        }
      },
      "EndpointGroupCreate": {
        "type": "object",
        "required": [
          "name",
          "tenant_name"
        ],
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "endpoint-group-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointGroup"
            }
          }
        }
      },
      "EndpointGroup": {
        "type": "object",
        "required": [
          "name",
          "tenant_name"
        ],
        "properties": {
          "id": {
            "readOnly": true,
            "type": "integer",
            "description": "Unique ID of the EndpointGroup generated by the service. User API can not pass this for create operation",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Unique name of the EndpointGroup",
            "example": "EndpointGroup-1"
          },
          "description": {
            "type": "string",
            "description": "Description about EndpointGroup",
            "example": "EndpointGroup-Sales"
          },
          "type": {
            "type": "string",
            "description": "Type of the EndpointGroup",
            "enum": [
              "l3-hand-off",
              "extension",
              "port-profile"
            ],
            "default": "extension",
            "example": "l3-hand-off | extension | port-profile"
          },
          "port-group": {
            "$ref": "#/components/schemas/PortGroup"
          },
          "port-property": {
            "$ref": "#/components/schemas/PortProperty"
          },
          "network-policy": {
            "$ref": "#/components/schemas/NetworkPolicy"
          },
          "error": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EpgError"
            }
          }
        }
      },
      "StaticRoute": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "description": "Device Management IP Address",
            "example": "10.25.25.100"
          },
          "static-route-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaticRouteProp"
            }
          }
        }
      },
      "StaticRouteProp": {
        "type": "object",
        "required": [
          "afi",
          "network",
          "nexthopIP"
        ],
        "properties": {
          "afi": {
            "type": "string",
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "example": "ipv4 | ipv6",
            "description": "Configure AFI for the static route"
          },
          "network": {
            "type": "string",
            "example": "20.0.0.0/24 | 2001:1::/64",
            "description": "Configure static route per Vrf"
          },
          "nexthopIP": {
            "type": "string",
            "description": "NextHop IP address for the given route",
            "example": "16.0.0.2 | 3001::2"
          },
          "distance": {
            "type": "integer",
            "example": 3,
            "description": "NextHop distance for the given route"
          }
        }
      },
      "EndpointGroupWithoutError": {
        "type": "object",
        "required": [
          "name",
          "tenant_name"
        ],
        "properties": {
          "id": {
            "readOnly": true,
            "type": "integer",
            "description": "Unique ID of the EndpointGroup generated by the service. User API can not pass this for create operation",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Unique name of the EndpointGroup",
            "example": "EndpointGroup-1"
          },
          "description": {
            "type": "string",
            "description": "Description about EndpointGroup",
            "example": "EndpointGroup-Sales"
          },
          "type": {
            "type": "string",
            "description": "Type of the EndpointGroup",
            "enum": [
              "l3-hand-off",
              "extension",
              "port-profile"
            ],
            "default": "extension",
            "example": "l3-hand-off | extension | port-profile"
          },
          "tenantName": {
            "type": "string",
            "description": "Tenant to which this EndpointGroup belongs",
            "example": "Tenant-1"
          },
          "state": {
            "type": "string",
            "enum": [
              "epg-empty",
              "epg-with-port-group",
              "epg-with-ctag-range",
              "epg-with-port-group-and-ctag-range",
              "epg-port-group-delete-pending",
              "epg-ctag-range-delete-pending",
              "epg-vrf-delete-pending",
              "epg-delete-pending",
              "epg-migration-pending",
              "epg-local-ip-delete-pending",
              "epg-anycast-ip-delete-pending"
            ],
            "description": "State of the EndpointGroup",
            "example": "epg-empty | epg-with-port-group | epg-with-ctag-range | epg-with-port-group-and-ctag-range | epg-port-group-delete-pending | epg-ctag-range-delete-pending | epg-vrf-delete-pending | epg-delete-pending | epg-migration-pending | epg-local-ip-delete-pending | epg-anycast-ip-delete-pending",
            "readOnly": true
          },
          "port-group": {
            "$ref": "#/components/schemas/PortGroup"
          },
          "port-property": {
            "$ref": "#/components/schemas/PortProperty"
          },
          "network-policy": {
            "$ref": "#/components/schemas/NetworkPolicy"
          }
        }
      },
      "EndpointGroupWithError": {
        "type": "object",
        "required": [
          "name",
          "tenant_name"
        ],
        "properties": {
          "id": {
            "readOnly": true,
            "type": "integer",
            "description": "Unique ID of the EndpointGroup generated by the service. User API can not pass this for create operation",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Unique name of the EndpointGroup",
            "example": "EndpointGroup-1"
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EpgError"
            }
          }
        }
      },
      "EpgError": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string"
          },
          "network-policy-error-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          },
          "port-property-error-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          },
          "rollback-error-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "PortGroup": {
        "type": "object",
        "properties": {
          "physical-port": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "port-channel": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": "po101 | po102",
            "description": "List of Portchannels"
          },
          "port-channel-states": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortChannelStates"
            }
          },
          "physical-port-states": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalPortStates"
            }
          }
        }
      },
      "PortChannelStates": {
        "type": "object",
        "properties": {
          "po": {
            "type": "string",
            "description": "Name/Identifier of the Portchannel unique to the tenant service",
            "example": "po101"
          },
          "po-state": {
            "type": "string",
            "description": "State of the Portchannel",
            "readOnly": true,
            "enum": [
              "po-init",
              "po-created",
              "po-port-delete-pending",
              "po-delete-pending",
              "po-lacp-timeout-set-pending",
              "po-description-set-pending",
              "po-min-links-count-set-pending",
              "po-mtu-delete-pending"
            ],
            "example": "po-init | po-created | po-port-delete-pending | po-delete-pending | po-lacp-timeout-set-pending | po-description-set-pending | po-min-links-count-set-pending | po-mtu-delete-pending"
          },
          "dev-state": {
            "type": "string",
            "description": "Device State of the Portchannel",
            "enum": [
              "provisioned",
              "provisioning-failed",
              "not-provisioned"
            ],
            "example": "provisioned | provisioning-failed | not-provisioned"
          },
          "app-state": {
            "type": "string",
            "description": "Application State of the Portchannel",
            "enum": [
              "cfg-ready",
              "cfg-in-sync",
              "cfg-refreshed",
              "cfg-refresh-err"
            ],
            "example": "cfg-ready | cfg-in-sync | cfg-refreshed | cfg-refresh-err"
          }
        }
      },
      "PhysicalPortStates": {
        "type": "object",
        "properties": {
          "port": {
            "type": "string",
            "description": "Name/Identifier of the Physical port unique to the tenant service",
            "example": "10.10.10.1[0/1]"
          },
          "dev-state": {
            "type": "string",
            "description": "Device State of the PhysicalPort",
            "enum": [
              "provisioned",
              "provisioning-failed",
              "not-provisioned"
            ],
            "example": "provisioned | provisioning-failed | not-provisioned"
          },
          "app-state": {
            "type": "string",
            "description": "Application State of the PhysicalPort",
            "enum": [
              "cfg-ready",
              "cfg-in-sync",
              "cfg-refreshed",
              "cfg-refresh-err"
            ],
            "example": "cfg-ready | cfg-in-sync | cfg-refreshed | cfg-refresh-err"
          }
        }
      },
      "PortProperty": {
        "type": "object",
        "properties": {
          "switchport-mode": {
            "type": "string",
            "enum": [
              "trunk",
              "access",
              "trunk-no-default-native"
            ],
            "example": "trunk | access | trunk-no-default-native",
            "description": "switch port mode",
            "default": "trunk"
          },
          "enable-switchport-native-vlan": {
            "type": "boolean",
            "description": "Enable the native vlan characteristics on the ports of this EndpointGroup. Valid only on trunk ports.",
            "default": false
          },
          "single-homed-bfd-session-type": {
            "type": "string",
            "enum": [
              "auto",
              "hardware",
              "software"
            ],
            "description": "Sets bfd session type on the ports of the EndpointGroup",
            "example": "auto | hardware | software",
            "default": "auto"
          },
          "access-list": {
            "type": "array",
            "description": "Application of MAC, IP or IPv6 ACL for mirror action in ingress or egress direction on Ethernet and Portchannel interfaces. The only supported ACL names are 'ext-mac-permit-any-mirror-acl', 'ext-ip-permit-any-mirror-acl', 'ext-ipv6-permit-any-mirror-acl' and only supported ACL type is 'extended'",
            "items": {
              "$ref": "#/components/schemas/AccessList"
            }
          }
        }
      },
      "NetworkPolicy": {
        "type": "object",
        "properties": {
          "ctag-range": {
            "type": "string",
            "description": "Customer vlan range in comma and hyphen separated format. Example- 2-20,30,40,50-55",
            "example": "101-102"
          },
          "vrf": {
            "type": "string",
            "description": "Vrf to which these networks are attached",
            "example": "VRF-GREEN"
          },
          "vrf-state": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "vrf-init",
              "vrf-created",
              "vrf-device-created",
              "vrf-device-static-route-delete-pending",
              "vrf-device-static-route-bfd-delete-pending"
            ],
            "description": "State of the Vrf",
            "example": "vrf-init | vrf-created | vrf-device-created | vrf-device-static-route-delete-pending | vrf-device-static-route-bfd-delete-pending"
          },
          "dev-state": {
            "type": "string",
            "enum": [
              "provisioned",
              "provisioning-failed",
              "not-provisioned"
            ],
            "description": "Device State of the Vrf",
            "example": "provisioned | provisioning-failed | not-provisioned"
          },
          "app-state": {
            "type": "string",
            "enum": [
              "cfg-ready",
              "cfg-in-sync",
              "cfg-refreshed",
              "cfg-refresh-err"
            ],
            "description": "Application State of the Vrf",
            "example": "cfg-ready | cfg-in-sync | cfg-refreshed | cfg-refresh-err"
          },
          "l3-vni": {
            "type": "integer",
            "description": "L3 VNI to use for this Vrf",
            "example": 201
          },
          "network-property": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkProperty"
            }
          }
        }
      },
      "NetworkProperty": {
        "type": "object",
        "properties": {
          "ctag": {
            "type": "string",
            "description": "Customer vlan",
            "example": 101
          },
          "is-native-vlan": {
            "type": "boolean",
            "description": "Ctag will be configured as native-vlan on ports",
            "example": true
          },
          "l2-vni": {
            "type": "integer",
            "description": "L2 VNI to use for this network",
            "example": 101
          },
          "bridge-domain-name": {
            "type": "string",
            "description": "Bridge Domain Name (or Label)",
            "example": "BD-101-201"
          },
          "ctag-description": {
            "type": "string",
            "description": "VLAN/BD description",
            "example": "Tenant L3 Hand-off VLAN | Tenant L3 Hand-off BD | Tenant L2 Extended VLAN | Tenant L3 Extended VLAN | Tenant L2 Extended BD | Tenant L3 Extended BD | Tenant L3 Hand-off BR BD | Tenant L3 Hand-off IRB BD | Tenant L3 Extended BR BD | Tenant L3 Extended IRB BD"
          },
          "access-list": {
            "type": "array",
            "description": "Application of MAC, IP or IPv6 ACL for mirror action in ingress or egress direction on VLAN and VE interfaces. The only supported ACL names are 'ext-mac-permit-any-mirror-acl', 'ext-ip-permit-any-mirror-acl', 'ext-ipv6-permit-any-mirror-acl' and only supported ACL type is 'extended'",
            "items": {
              "$ref": "#/components/schemas/AccessList"
            }
          },
          "suppress-arp": {
            "type": "string",
            "description": "Suppress-arp to set for this network",
            "example": true
          },
          "suppress-nd": {
            "type": "string",
            "description": "Suppress-nd to set for this network",
            "example": true
          },
          "ip-mtu": {
            "type": "integer",
            "description": "IP MTU to set for this network",
            "example": 9100
          },
          "anycast": {
            "description": "This is deprecated. Use AnycastIpAddress object",
            "$ref": "#/components/schemas/AnycastIp"
          },
          "anycast-ip-address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnycastIpAddress"
            }
          },
          "local-ip-address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalIpAddress"
            }
          },
          "ipv6-nd": {
            "$ref": "#/components/schemas/IPv6ND"
          },
          "dev-state": {
            "type": "string",
            "enum": [
              "provisioned",
              "provisioning-failed",
              "not-provisioned"
            ],
            "description": "Device State of the Network",
            "example": "provisioned | provisioning-failed | not-provisioned",
            "readOnly": true
          },
          "app-state": {
            "type": "string",
            "enum": [
              "cfg-ready",
              "cfg-in-sync",
              "cfg-refreshed",
              "cfg-refresh-err"
            ],
            "description": "Application State of the Network",
            "example": "cfg-ready | cfg-in-sync | cfg-refreshed | cfg-refresh-err",
            "readOnly": true
          }
        }
      },
      "AccessList": {
        "type": "object",
        "required": [
          "name",
          "type",
          "direction"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "ext-mac-permit-any-mirror-acl | ext-ip-permit-any-mirror-acl | ext-ipv6-permit-any-mirror-acl",
            "description": "Name of ACL"
          },
          "type": {
            "type": "string",
            "enum": [
              "mac",
              "ip",
              "ipv6"
            ],
            "example": "mac | ip | ipv6",
            "description": "Type of ACL i.e. mac, ip, ipv6"
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "example": "in | out",
            "description": "Direction of application of ACL i.e. in, out"
          }
        }
      },
      "NetworkPropertyUpdate": {
        "type": "object",
        "properties": {
          "ctag": {
            "type": "string",
            "description": "Customer vlan",
            "example": 101
          },
          "suppress-arp": {
            "type": "string",
            "description": "Suppress-arp to set for this network",
            "example": true
          },
          "suppress-nd": {
            "type": "string",
            "description": "Suppress-nd to set for this network",
            "example": true
          },
          "ip-mtu": {
            "type": "integer",
            "description": "IP MTU to set for this network",
            "example": 9100
          },
          "anycast": {
            "description": "This is deprecated. Use AnycastIpAddress object",
            "$ref": "#/components/schemas/AnycastIp"
          },
          "anycast-ip-address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnycastIpAddress"
            }
          },
          "local-ip-address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalIpAddress"
            }
          },
          "ipv6-nd": {
            "$ref": "#/components/schemas/IPv6ND"
          }
        }
      },
      "EndpointGroupPortGroupUpdate": {
        "type": "object",
        "required": [
          "name",
          "operation",
          "port-group"
        ],
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "operation": {
            "type": "string",
            "enum": [
              "port-group-add",
              "port-group-delete"
            ],
            "description": "Add or delete ports from the port group",
            "example": "port-group-add | port-group-delete"
          },
          "endpoint-group-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointGroupPortGroup"
            }
          }
        }
      },
      "EndpointGroupPortGroup": {
        "type": "object",
        "required": [
          "name",
          "operation",
          "port-group"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of the EndpointGroup",
            "example": "EndpointGroup-1"
          },
          "port-group": {
            "$ref": "#/components/schemas/PortGroup"
          },
          "port-property": {
            "$ref": "#/components/schemas/PortProperty"
          }
        }
      },
      "EndpointGroupNetworkPolicyUpdate": {
        "type": "object",
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "operation": {
            "type": "string",
            "enum": [
              "ctag-range-add",
              "ctag-range-delete",
              "vrf-add",
              "vrf-delete"
            ],
            "description": "Add or delete ctag-range and/or vrf",
            "example": "ctag-range-add | ctag-range-delete | vrf-add | vrf-delete"
          },
          "endpoint-group-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointGroupNetworkPolicy"
            }
          }
        }
      },
      "EndpointGroupNetworkPropertyUpdate": {
        "type": "object",
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "operation": {
            "type": "string",
            "enum": [
              "local-ip-add",
              "local-ip-delete",
              "anycast-ip-add",
              "anycast-ip-delete"
            ],
            "description": "Add or delete local-ip and/or anycast-ip",
            "example": "local-ip-add | local-ip-delete | anycast-ip-add | anycast-ip-delete"
          },
          "endpoint-group-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointGroupNetworkProperty"
            }
          }
        }
      },
      "EndpointGroupNetworkPolicy": {
        "type": "object",
        "required": [
          "name",
          "ctag-range"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of the EndpointGroup",
            "example": "EndpointGroup-1"
          },
          "network-policy": {
            "$ref": "#/components/schemas/NetworkPolicy"
          }
        }
      },
      "EndpointGroupNetworkProperty": {
        "type": "object",
        "required": [
          "name",
          "ctag-range"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of the EndpointGroup",
            "example": "EndpointGroup-1"
          },
          "network-property": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkPropertyUpdate"
            }
          }
        }
      },
      "EndpointGroupDetach": {
        "type": "object",
        "required": [
          "from-epg",
          "to-epg",
          "tenant_name"
        ],
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Name of the tenant to which this EndpointGroup belongs",
            "example": "Tenant-1"
          },
          "from-epg": {
            "type": "string",
            "description": "Unique name of the EndpointGroup",
            "example": "EndpointGroup-1"
          },
          "to-epg": {
            "type": "string",
            "description": "New EndpointGroup name on which these network(s) will be created",
            "example": "EndpointGroup-2"
          },
          "to-epg-description": {
            "type": "string",
            "description": "Description about EndpointGroup",
            "example": "EndpointGroup-Finance"
          },
          "ctag-range": {
            "type": "string",
            "description": "Range of Ctags to detach",
            "example": "2-30"
          }
        }
      },
      "AnycastIp": {
        "type": "object",
        "properties": {
          "ipv4-address": {
            "type": "string",
            "description": "IPv4 anycast address",
            "example": "20.0.0.0/24"
          },
          "ipv6-address": {
            "type": "string",
            "description": "IPv6 anycast address",
            "example": "2000:1::/64"
          }
        }
      },
      "AnycastIpAddress": {
        "type": "object",
        "properties": {
          "ip-address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpAddress"
            }
          }
        }
      },
      "IPv6ND": {
        "type": "object",
        "properties": {
          "ipv6-nd-mtu": {
            "type": "integer",
            "description": "IPv6 MTU set for ND packets",
            "example": 101
          },
          "ipv6-nd-managed-config": {
            "type": "boolean",
            "description": "IPv6 ND Managed Config flag set at ND router advertisement",
            "example": true
          },
          "ipv6-nd-other-config": {
            "type": "boolean",
            "description": "IPv6 ND Other Config flag set at ND router advertisement",
            "example": true
          },
          "ipv6-nd-prefix": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPv6NDPrefix"
            }
          }
        }
      },
      "IPv6NDPrefix": {
        "type": "object",
        "properties": {
          "ipv6-address": {
            "type": "string",
            "description": "IPv6 ND prefix address",
            "example": "2000:1::/64"
          },
          "valid-lifetime": {
            "type": "string",
            "description": "IPv6 ND prefix address valid lifetime",
            "example": 259200
          },
          "preferred-lifetime": {
            "type": "string",
            "description": "IPv6 ND prefix address preferred lifetime",
            "example": 259200
          },
          "no-advertise": {
            "type": "boolean",
            "description": "Enable/disable IPv6 ND prefix advertise",
            "example": true
          },
          "config-type": {
            "type": "string",
            "enum": [
              "no-autoconfig",
              "no-onlink",
              "off-link"
            ],
            "description": "IPv6 ND prefix config type",
            "example": "no-autoconfig | no-onlink | off-link"
          }
        }
      },
      "Ipv4RouteTarget": {
        "type": "object",
        "properties": {
          "route-target": {
            "type": "string",
            "description": "Configure Target VPN Extended Communities for evpn",
            "example": "100:100"
          },
          "route-target-type": {
            "type": "string",
            "enum": [
              "both",
              "import",
              "export"
            ],
            "example": "both | import | export",
            "description": "Configure Target VPN Extended Communities for evpn"
          }
        }
      },
      "VrfCreate": {
        "type": "object",
        "required": [
          "tenant_name"
        ],
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "vrf-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vrf"
            }
          }
        }
      },
      "Vrf": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "readOnly": true,
            "type": "integer",
            "description": "Unique ID of the Vrf generated by the service. User API can not pass this for create operation",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "vrf-red",
            "description": "Name of the Vrf"
          },
          "tenantName": {
            "type": "string",
            "description": "Tenant to which this Vrf belongs",
            "example": "Tenant-1"
          },
          "routing-type": {
            "type": "string",
            "enum": [
              "distributed",
              "centralized"
            ],
            "description": "Type of Routing for the given Vrf, default value is distributed. For Centralized routing, the L3 functionality for the Vrf will be handled at the centralized location indicated by the centralized-routers. For Distributed routing, the L3 functionality for the Vrf will be distributed across the fabric."
          },
          "centralized-router": {
            "type": "array",
            "description": "Users can provide only one multi-homed BL pair or one single-homed BL device as centralized-routers",
            "items": {
              "type": "object",
              "uniqueItems": true,
              "properties": {
                "mgmt-ip": {
                  "type": "string",
                  "description": "Device Management IP Address",
                  "example": "10.25.25.100"
                }
              }
            }
          },
          "vrf-type": {
            "type": "string",
            "enum": [
              "shared",
              "private"
            ],
            "description": "Vrfs of shared tenant are considered as shared vrf",
            "example": "shared | private"
          },
          "vrf-state": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "vrf-init",
              "vrf-created",
              "vrf-device-created",
              "vrf-device-static-route-delete-pending",
              "vrf-device-static-route-bfd-delete-pending"
            ],
            "description": "State of the Vrf",
            "example": "vrf-init | vrf-created | vrf-device-created | vrf-device-static-route-delete-pending | vrf-device-static-route-bfd-delete-pending"
          },
          "dev-state": {
            "type": "string",
            "enum": [
              "provisioned",
              "provisioning-failed",
              "not-provisioned"
            ],
            "description": "Device State of the Vrf",
            "example": "provisioned | provisioning-failed | not-provisioned"
          },
          "app-state": {
            "type": "string",
            "enum": [
              "cfg-ready",
              "cfg-in-sync",
              "cfg-refreshed",
              "cfg-refresh-err"
            ],
            "description": "Application State of the Vrf",
            "example": "cfg-ready | cfg-in-sync | cfg-refreshed | cfg-refresh-err"
          },
          "l3-vni": {
            "type": "integer",
            "example": 1024,
            "readOnly": true,
            "description": "L3 VNI which this Vrf will use"
          },
          "irb-bd": {
            "type": "integer",
            "example": 1024,
            "readOnly": true,
            "description": "IRB BD which this Vrf will use"
          },
          "irb-ve": {
            "type": "integer",
            "example": 1024,
            "readOnly": true,
            "description": "Vrf interface for IRB BD"
          },
          "br-bd": {
            "type": "integer",
            "example": 1024,
            "readOnly": true,
            "description": "Backup Routing BD which this Vrf will use"
          },
          "br-ve": {
            "type": "integer",
            "example": 1024,
            "readOnly": true,
            "description": "Vrf interface for Backup Routing BD"
          },
          "br-vni": {
            "type": "integer",
            "example": 1025,
            "readOnly": true,
            "description": "VNI for Backup Routing BD"
          },
          "local-asn": {
            "type": "integer",
            "format": "int64",
            "example": 1024,
            "description": "Local Asn for Vrf"
          },
          "route-target": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ipv4RouteTarget"
            },
            "description": "List of route targets"
          },
          "static-route": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaticRoute"
            },
            "description": "List of static routes"
          },
          "static-route-bfd": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaticRouteBfd"
            },
            "description": "List of static route bfds"
          },
          "max-path": {
            "type": "integer",
            "format": "int",
            "example": 8,
            "description": "Maximum-path for Vrf"
          },
          "redistribute": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "static",
                "connected"
              ],
              "example": "static | connected",
              "description": "Redistribute type for Vrf"
            }
          },
          "rh-max-path": {
            "type": "integer",
            "format": "int",
            "example": 8,
            "description": "Resilient hashing maximum-path for Vrf"
          },
          "rh-ecmp-enable": {
            "type": "boolean",
            "example": true,
            "description": "Enable/disable resilient hashing for Vrf"
          },
          "graceful-restart-enable": {
            "type": "boolean",
            "example": true,
            "description": "Enable/disable graceful restart for Vrf"
          },
          "network": {
            "type": "array",
            "description": "List of bgp network routes to be advertised to the BGP peers.",
            "items": {
              "$ref": "#/components/schemas/BgpNetworkRoute"
            }
          },
          "static-network": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpStaticNetwork"
            },
            "description": "List of static networks to be advertised to the BGP peers"
          },
          "aggregate-address": {
            "type": "array",
            "description": "List of BGP aggregate-address to be advertised to the BGP peers.",
            "items": {
              "$ref": "#/components/schemas/BgpAggregateAddress"
            }
          },
          "error": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VrfError"
            },
            "description": "List of Vrf errors"
          }
        }
      },
      "VrfUpdate": {
        "type": "object",
        "required": [
          "name",
          "operation",
          "tenantName"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "vrf-red",
            "description": "Identifier of the Vrf unique to the tenant service"
          },
          "operation": {
            "type": "string",
            "enum": [
              "local-asn-add",
              "local-asn-delete",
              "static-route-bfd-add",
              "static-route-bfd-delte",
              "static-route-add",
              "static-route-delete",
              "max-path-add",
              "max-path-delete",
              "redistribute-add",
              "redistribute-delete",
              "rh-max-path-add",
              "rh-max-path-delete",
              "centralized-router-add",
              "centralized-router-delete",
              "rh-ecmp-update",
              "graceful-restart-update",
              "network-add",
              "network-delete",
              "static-network-add",
              "static-network-delete",
              "aggregate-address-add",
              "aggregate-address-delete"
            ],
            "description": "Below operations are supported -\n 1. local-asn-add: Add local-asn in Vrf.\n 2. local-asn-delete: Delete local-asn from Vrf.\n 3. static-route-bfd-add: Add static-route-bfd in Vrf.\n 4. static-route-bfd-delete: Delete static-route-bfd from Vrf.\n 5. static-route-add: Add static-route in Vrf.\n 6. static-route-delete: Delete static-route from Vrf.\n 7. max-path-add: Add max-path in Vrf.\n 8. max-path-delete: Delete max-path from Vrf.\n 9. redistribute-add: Add redistribute in Vrf.\n 10. redistribute-delete: Delete redistribute from Vrf.\n 11. rh-max-path-add: Add rh-max-path in Vrf.\n 12. rh-max-path-delete: Delete rh-max-path from Vrf.\n 13. centralized-router-add: Add centralized-router devices to Vrf.\n 14. centralized-router-delete: Delete centralized-router devices from Vrf.\n 15. rh-ecmp-update: Update rh-ecmp for Vrf.\n 16. graceful-restart-update: Update graceful-restart for Vrf.\n 17. network-add: Add network route.\n 18. network-delete: Delete network route.\n 19. static-network-add: Add static-network to Vrf.\n 20.static-network-delete: Delete static-network from Vrf.\n 21. aggregate-address-add: Add aggregate-address in Vrf.\n 22. aggregate-address-delete: Delete aggregate-address from vrf.\n",
            "example": "local-asn-add | local-asn-delete | static-route-bfd-add | static-route-bfd-delete | static-route-add | static-route-delete | | max-path-add | max-path-delete | redistribute-add | redistribute-delete | rh-max-path-add | rh-max-path-delete | centralized-router-add | centralized-router-delete | rh-ecmp-update | graceful-restart-update | network-add | network-delete | static-network-add | static-network-delete | aggregate-address-add | aggregate-address-delete "
          },
          "localAsn": {
            "type": "integer",
            "format": "int64",
            "example": 1024,
            "description": "Local Asn for Vrf"
          },
          "tenantName": {
            "type": "string",
            "description": "Tenant to which this Vrf belongs",
            "example": "Tenant-1"
          },
          "static-route-bfd": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaticRouteBfd"
            }
          },
          "static-route": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaticRoute"
            }
          },
          "max-path": {
            "type": "integer",
            "format": "int",
            "example": 8,
            "description": "Maximum-path for Vrf"
          },
          "redistribute": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "static",
                "connected"
              ],
              "example": "static | connected",
              "description": "Redistribute type for Vrf"
            }
          },
          "rh-max-path": {
            "type": "integer",
            "format": "int",
            "example": 8,
            "description": "Resilient hashing maximum-path for Vrf"
          },
          "rh-ecmp-enable": {
            "type": "boolean",
            "example": true,
            "description": "Enable/disable resilient hashing for Vrf"
          },
          "centralized-router": {
            "type": "array",
            "description": "Users can provide only one multi-homed BL pair or one single-homed BL device as centralized-routers",
            "items": {
              "type": "object",
              "uniqueItems": true,
              "properties": {
                "mgmt-ip": {
                  "type": "string",
                  "description": "Device Management IP Address",
                  "example": "10.25.25.100"
                }
              }
            }
          },
          "graceful-restart-enable": {
            "type": "boolean",
            "example": true,
            "description": "Enable/disable graceful restart for Vrf"
          },
          "network": {
            "type": "array",
            "description": "List of bgp networks to be advertised to the BGP peers.",
            "items": {
              "$ref": "#/components/schemas/BgpNetworkRoute"
            }
          },
          "static-network": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpStaticNetwork"
            },
            "description": "List of static networks to be advertised to the BGP peers"
          },
          "aggregate-address": {
            "type": "array",
            "description": "List of BGP aggregate-address to be advertised to the BGP peers.",
            "items": {
              "$ref": "#/components/schemas/BgpAggregateAddress"
            }
          },
          "error": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VrfError"
            }
          }
        }
      },
      "VrfWithError": {
        "type": "object",
        "required": [
          "name",
          "tenant_name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of the Vrf",
            "example": "VRF-1"
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VrfError"
            }
          }
        }
      },
      "VrfError": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string"
          },
          "error-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          },
          "rollback-error-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "StaticRouteBfd": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "description": "Device Management IP Address",
            "example": "10.25.25.100"
          },
          "static-route-bfd-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaticRouteBfdProp"
            }
          }
        }
      },
      "StaticRouteBfdProp": {
        "type": "object",
        "required": [
          "afi",
          "DestIPAddr",
          "SrcIPAddr"
        ],
        "properties": {
          "afi": {
            "type": "string",
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "example": "ipv4 | ipv6",
            "description": "Configure AFI for the BFD on static route"
          },
          "DestIPAddr": {
            "type": "string",
            "description": "Destination IP address for the given route",
            "example": "16.0.0.2 | 3001::2"
          },
          "SrcIPAddr": {
            "type": "string",
            "description": "Source IP address for the given route",
            "example": "16.0.0.2 | 3001::2"
          },
          "interval": {
            "type": "integer",
            "example": 300,
            "description": "Interval for the given route"
          },
          "minRx": {
            "type": "integer",
            "example": 300,
            "description": "Min-rx for the given route"
          },
          "multiplier": {
            "type": "integer",
            "example": 3,
            "description": "Multiplier for the given route"
          }
        }
      },
      "EndpointGroupList": {
        "type": "object",
        "properties": {
          "epg": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointGroup"
            }
          }
        }
      },
      "EndpointGroupListWithoutErorr": {
        "type": "object",
        "properties": {
          "epg": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointGroupWithoutError"
            }
          }
        }
      },
      "PortChannelList": {
        "type": "object",
        "properties": {
          "portchannel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortChannel"
            }
          }
        }
      },
      "PortChannel": {
        "type": "object",
        "description": "Portchannel will be created for the device(s) belonging to same fabric.",
        "required": [
          "name",
          "memberinterfaces",
          "speed",
          "negotiation",
          "tenantName",
          "lacpTimeout"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID of the Portchannel generated by the service. User API can not pass this for create operation",
            "example": 1
          },
          "number": {
            "type": "string",
            "readOnly": true,
            "description": "Portchannel interface number generated by the service",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "po101",
            "description": "Identifier of the Portchannel unique to the tenant service"
          },
          "description": {
            "type": "string",
            "description": "Description of the Portchannel",
            "example": "po101"
          },
          "speed": {
            "type": "string",
            "enum": [
              "100Mbps",
              "1Gbps",
              "10Gbps",
              "25Gbps",
              "40Gbps",
              "100Gbps"
            ],
            "example": "100Mbps | 1Gbps | 10Gbps | 25Gbps | 40Gbps | 100Gbps",
            "description": "Configure speed for the Portchannel and its Member ports"
          },
          "negotiation": {
            "type": "string",
            "enum": [
              "active",
              "passive",
              "static"
            ],
            "example": "active | passive | static",
            "description": "Configure LACP negotiation mode for Portchannel"
          },
          "memberinterfaces": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "tenantName": {
            "type": "string",
            "description": "Name of the tenant to which this Portchannel belongs",
            "example": "Tenant-1"
          },
          "lacpTimeout": {
            "type": "string",
            "enum": [
              "short",
              "long"
            ],
            "example": "short | long",
            "description": "Configure LACP timeout for Portchannel"
          },
          "minLinkCount": {
            "type": "string",
            "description": "Minimum number of links provided for a Portchannel",
            "example": 2
          },
          "mtu": {
            "type": "integer",
            "description": "MTU for a Portchannel",
            "example": 9100
          },
          "state": {
            "readOnly": true,
            "type": "string",
            "description": "State of the Portchannel",
            "enum": [
              "po-init",
              "po-created",
              "po-port-delete-pending",
              "po-delete-pending",
              "po-lacp-timeout-set-pending",
              "po-description-set-pending",
              "po-min-links-count-set-pending",
              "po-mtu-delete-pending"
            ],
            "example": "po-init | po-created | po-port-delete-pending | po-delete-pending | po-lacp-timeout-set-pending | po-description-set-pending | po-min-links-count-set-pending | po-mtu-delete-pending"
          },
          "dev-state": {
            "readOnly": true,
            "type": "string",
            "description": "Device State of the Portchannel",
            "enum": [
              "provisioned",
              "provisioning-failed",
              "not-provisioned"
            ],
            "example": "provisioned | provisioning-failed | not-provisioned"
          },
          "app-state": {
            "readOnly": true,
            "type": "string",
            "description": "Application State of the Portchannel",
            "enum": [
              "cfg-ready",
              "cfg-in-sync",
              "cfg-refreshed",
              "cfg-refresh-err"
            ],
            "example": "cfg-ready | cfg-in-sync | cfg-refreshed | cfg-refresh-err"
          },
          "error": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoError"
            }
          }
        }
      },
      "PoError": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string"
          },
          "error-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          },
          "rollback-error-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "PortChannelUpdate": {
        "type": "object",
        "required": [
          "name",
          "operation",
          "memberinterfaces",
          "tenantName"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique ID of the Portchannel generated by the service. User API can not pass this for create operation",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "po101",
            "description": "Identifier of the Portchannel unique to the tenant service"
          },
          "operation": {
            "type": "string",
            "enum": [
              "port-add",
              "port-delete",
              "lacp-timeout",
              "description",
              "min-link-count",
              "mtu-add",
              "mtu-delete"
            ],
            "description": "Add ports, Delete ports, modify lacp-timeout, description, minimum links, add mtu and delete mtu for Portchannel",
            "example": "port-add | port-delete | lacp-timeout | description | min-link-count | mtu-add | mtu-delete"
          },
          "memberinterfaces": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "tenantName": {
            "type": "string",
            "description": "Tenant to which this Portchannel belongs",
            "example": "Tenant-1"
          },
          "lacpTimeout": {
            "type": "string",
            "enum": [
              "short",
              "long"
            ],
            "example": "short | long",
            "description": "Configure LACP timeout for Portchannel"
          },
          "description": {
            "type": "string",
            "description": "Description of the Portchannel",
            "example": "po101"
          },
          "minLinkCount": {
            "type": "string",
            "description": "Minimum number of links provided for a Portchannel",
            "example": 2
          },
          "mtu": {
            "type": "integer",
            "description": "MTU for a Portchannel",
            "example": 9100
          }
        }
      },
      "ExecutionsResponse": {
        "properties": {
          "items": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ExecutionResponse"
            }
          }
        },
        "title": "Fabrics Data",
        "example": {
          "items": [
            {
              "id": "id",
              "entity": "Tenant",
              "command": "Create",
              "status": "Completed",
              "start_time": "2000-01-23T04:56:07.000+00:00",
              "end_time": "2000-01-23T04:56:09.000+00:00",
              "user_name": "root",
              "parameters": "{\"description\":\"Tenant1\",\"l2-vni-range\":\"10002-14190\",\"name\":\"tenant1\", \"num-of-vrf\":10,\"port-list\":[{\"mgmt-ip\":\"10.25.25.100\",\"port\":[{\"int-type\": \"ethernet\",\"name\":\"0/30\"}]},{\"mgmt-ip\":\"10.25.25.101\",\"port\": [{\"int-type\":\"ethernet\",\"name\":\"0/30\"},\"vlan-range\":\"2-4090\"}",
              "error": "Error message"
            },
            {
              "id": "id",
              "entity": "Tenant",
              "command": "Delete",
              "status": "Completed",
              "start_time": "2000-01-23T04:56:07.000+00:00",
              "end_time": "2000-01-23T04:56:09.000+00:00",
              "user_name": "root",
              "parameters": "{\"force\":[\"true\"],\"name\":[\"tenant1\"]}",
              "error": "Error message"
            }
          ]
        }
      },
      "ExecutionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "10",
            "description": "ID of the operation"
          },
          "entity": {
            "type": "string",
            "example": "Tenant",
            "description": "Name of the entity of tenant service"
          },
          "command": {
            "type": "string",
            "example": "create",
            "description": "Command that was executed"
          },
          "status": {
            "type": "string",
            "example": "Completed",
            "description": "Command that was executed"
          },
          "start_time": {
            "type": "string",
            "example": "2000-01-23T04:56:07.000+00:00",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "example": "2000-01-23T04:56:09.000+00:00",
            "format": "date-time"
          },
          "duration": {
            "type": "string",
            "example": "38.6076884s"
          },
          "user_name": {
            "type": "string",
            "example": "root",
            "description": "Name of the user who executed the command"
          },
          "parameters": {
            "type": "string",
            "example": "configure add",
            "description": "Parameters used in the command"
          },
          "error": {
            "type": "string",
            "example": "Error message",
            "description": "Error while execution rest request"
          }
        },
        "title": "Single execution response",
        "example": {
          "id": "id",
          "entity": "Tenant",
          "command": "Create",
          "status": "Completed",
          "start_time": "2000-01-23T04:56:07.000+00:00",
          "end_time": "2000-01-23T04:56:09.000+00:00",
          "user_name": "root",
          "parameters": "{\"description\":\"Tenant1\",\"l2-vni-range\":\"10002-14190\",\"name\":\"tenant1\", \"num-of-vrf\":10,\"port-list\":[{\"mgmt-ip\":\"10.25.25.100\",\"port\":[{\"int-type\": \"ethernet\",\"name\":\"0/30\"}]},{\"mgmt-ip\":\"10.25.25.101\",\"port\": [{\"int-type\":\"ethernet\",\"name\":\"0/30\"},\"vlan-range\":\"2-4090\"}",
          "error": "Error message"
        }
      },
      "DriftReconciliationModel": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "example": "10.25.25.100"
          },
          "reconciliation-status": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "config-type": {
                  "type": "string",
                  "enum": [
                    "Vlan",
                    "Vrf",
                    "BrideDomain"
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "Success",
                    "Failure",
                    "Not-Attempted"
                  ]
                },
                "error-list": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorModel"
                  }
                }
              }
            }
          },
          "config-drift": {
            "$ref": "#/components/schemas/DriftModel"
          },
          "error": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "error-type": {
                  "type": "string",
                  "enum": [
                    "Drift-Generation",
                    "Validation"
                  ]
                },
                "error-list": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorModel"
                  }
                }
              }
            }
          }
        }
      },
      "DriftModel": {
        "type": "object",
        "properties": {
          "Vlan": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VlanDriftModel"
            }
          },
          "Vrf": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VrfDriftModel"
            }
          },
          "Ve": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VeDriftModel"
            }
          },
          "PortProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterfaceDriftModel"
            }
          },
          "mct_client": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCTClientDriftModel"
            }
          },
          "PwProfile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PwProfileDriftModel"
            }
          },
          "BridgeDomain": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BridgeDomainDriftModel"
            }
          },
          "Lif": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterfaceDriftModel"
            }
          },
          "OverlayGateway": {
            "$ref": "#/components/schemas/OverlayGwDriftModel"
          },
          "Epvn": {
            "$ref": "#/components/schemas/EvpnDriftModel"
          },
          "RouterBgp": {
            "$ref": "#/components/schemas/RouterBgpDriftModel"
          },
          "Portchannel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortchannelDriftModel"
            }
          },
          "MctCluster": {
            "$ref": "#/components/schemas/MctClusterDriftModel"
          },
          "MirrorSession": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MirrorSessionDriftModel"
            }
          }
        }
      },
      "AppState": {
        "type": "string",
        "description": "Application state of the component",
        "enum": [
          "cfg-ready",
          "cfg-in-sync",
          "cfg-refreshed",
          "cfg-refresh-err"
        ]
      },
      "VlanDriftModel": {
        "type": "object",
        "properties": {
          "vlan_id": {
            "type": "integer",
            "description": "VLAN configured on the device",
            "example": 1001
          },
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "interface": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "app_state": {
                  "$ref": "#/components/schemas/AppState"
                },
                "int_type": {
                  "type": "string",
                  "description": "Interface type [ethernet, ve, portchannel]",
                  "example": "ethernet"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the interface [0/1, 0, 1/0/1, 1/0/1:2]",
                  "example": "0/1"
                }
              }
            }
          }
        }
      },
      "VrfDriftModel": {
        "type": "object",
        "properties": {
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "name": {
            "type": "string",
            "description": "Vrf Name",
            "example": "vrf_red"
          }
        }
      },
      "RunningConfigResponse": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EventHistoryiesResponse": {
        "properties": {
          "items": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/EventHistoryResponse"
            }
          }
        }
      },
      "EventHistoryResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the operation"
          },
          "execution_uuid": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426655440000",
            "description": "uuid of the execution"
          },
          "service": {
            "type": "string",
            "example": "tenant",
            "description": "Name of the service"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "event": {
            "type": "string",
            "example": "epg-create",
            "description": "Name of the Event"
          },
          "device": {
            "type": "string",
            "example": "10.25.25.100",
            "description": "IP address of the Device"
          },
          "message_type": {
            "type": "string",
            "example": "EPG",
            "description": "Type of the Message"
          },
          "message_object": {
            "type": "string",
            "example": "EPG-1231",
            "description": "Instance of the Message"
          },
          "message": {
            "type": "string",
            "example": "EPG creation failed",
            "description": "Simple text of the message"
          },
          "error_text": {
            "type": "string",
            "example": "Failed at 10.25.25.100",
            "description": "Verbose error message"
          }
        }
      },
      "VeDriftModel": {
        "type": "object",
        "properties": {
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "name": {
            "type": "string",
            "description": "RouterVe Interface Name",
            "example": 100
          }
        }
      },
      "InterfaceDriftModel": {
        "type": "object",
        "properties": {
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "int_type": {
            "type": "string",
            "description": "Interface type [ethernet, port-channel]",
            "example": "ethernet"
          },
          "name": {
            "type": "string",
            "description": "Name of the interface [0/1, 0, 1/0/1, 1/0/1:2]",
            "example": "0/1"
          }
        }
      },
      "MCTClientDriftModel": {
        "type": "object",
        "properties": {
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "client_name": {
            "type": "string",
            "description": "Name of the mct client",
            "example": "cluster_1"
          },
          "interface": {
            "type": "object",
            "properties": {
              "app_state": {
                "$ref": "#/components/schemas/AppState"
              },
              "int_type": {
                "type": "string",
                "description": "Interface type [ethernet, PO etc]",
                "example": "ethernet"
              },
              "name": {
                "type": "string",
                "description": "Name of the interface [0/1, 0, 1/0/1, 1/0/1:2]",
                "example": "0/1"
              }
            }
          }
        }
      },
      "BridgeDomainDriftModel": {
        "type": "object",
        "properties": {
          "bd_id": {
            "type": "integer",
            "description": "BridgeDomain configured on the device",
            "example": 1001
          },
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "Lif": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LifDriftModel"
            }
          }
        }
      },
      "LifDriftModel": {
        "type": "object",
        "properties": {
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "int_type": {
            "type": "string",
            "description": "Interface type [ethernet, ve, portchannel]",
            "example": "ethernet"
          },
          "name": {
            "type": "string",
            "description": "Name of the interface [0/1, 0, 1/0/1, 1/0/1:2]",
            "example": "0/1"
          }
        }
      },
      "EvpnDriftModel": {
        "type": "object",
        "properties": {
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "evpn_name": {
            "type": "string"
          },
          "Vlan": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericConfigDriftModel"
            }
          },
          "BridgeDomain": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericConfigDriftModel"
            }
          }
        }
      },
      "MctClusterDriftModel": {
        "type": "object",
        "properties": {
          "cluster_id": {
            "type": "integer"
          },
          "cluster_name": {
            "type": "string"
          },
          "VlanMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericConfigDriftModel"
            }
          },
          "BridgeDomainMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericConfigDriftModel"
            }
          }
        }
      },
      "OverlayGwDriftModel": {
        "type": "object",
        "properties": {
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "gw_name": {
            "type": "string"
          },
          "Vlan": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericConfigDriftModel"
            }
          },
          "BridgeDomain": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericConfigDriftModel"
            }
          }
        }
      },
      "PwProfileDriftModel": {
        "type": "object",
        "properties": {
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "name": {
            "type": "string",
            "description": "Pseudowire Profile Name",
            "example": "Tenant_profile"
          }
        }
      },
      "GenericConfigDriftModel": {
        "type": "object",
        "properties": {
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "RouterBgpDriftModel": {
        "type": "object",
        "properties": {
          "peer-group": {
            "type": "array",
            "description": "List of BGP Peer-Group Configured on device",
            "items": {
              "$ref": "#/components/schemas/GenericConfigDriftModel"
            }
          },
          "bgpAddressFamily": {
            "type": "array",
            "items": {
              "properties": {
                "vrf_name": {
                  "type": "string"
                },
                "address_family": {
                  "type": "string",
                  "example": "ipv4 | ipv6"
                },
                "app_state": {
                  "$ref": "#/components/schemas/AppState"
                }
              }
            }
          }
        }
      },
      "PortchannelDriftModel": {
        "type": "object",
        "properties": {
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "number": {
            "type": "integer",
            "description": "Portchannel configured on the device",
            "example": 101
          },
          "name": {
            "type": "string",
            "description": "Name of the Port-channel",
            "example": "po101"
          },
          "memberInterface": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortchannelIfDriftModel"
            }
          }
        }
      },
      "PortchannelIfDriftModel": {
        "type": "object",
        "properties": {
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          },
          "name": {
            "type": "string",
            "description": "Name of the interface [0/1, 0, 1/0/1, 1/0/1:2]",
            "example": "0/1"
          }
        }
      },
      "MirrorSessionDriftModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Mirror Service Session",
            "example": "mirror-service-1"
          },
          "app_state": {
            "$ref": "#/components/schemas/AppState"
          }
        }
      },
      "MirrorServiceSession": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "readOnly": true,
            "type": "integer",
            "description": "Unique ID of the Mirror Service Session generated by the service. User API can not pass this for create operation.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Unique name of the Mirror Service Session",
            "example": "mirror-service-1"
          },
          "description": {
            "type": "string",
            "description": "Description of the Mirror Service Session",
            "example": "mirror-session-description"
          },
          "mirror-service-session-config": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MirrorServiceSessionConfig"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "mirror-session-init",
              "mirror-session-created",
              "mirror-session-delete-pending"
            ],
            "description": "State of the Mirror Service Session",
            "example": "mirror-session-init | mirror-session-created | mirror-session-delete-pending",
            "readOnly": true
          },
          "error": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MirrorServiceSessionError"
            }
          }
        }
      },
      "MirrorServiceSessionConfig": {
        "type": "object",
        "description": "Mirror Service Session Configuration",
        "properties": {
          "mirror-type": {
            "type": "string",
            "enum": [
              "port-based",
              "flow-based"
            ],
            "description": "Type of the Mirror Service Session",
            "example": "port-based | flow-based",
            "default": "port-based"
          },
          "mirror-source": {
            "$ref": "#/components/schemas/MirrorSource"
          },
          "mirror-destination": {
            "$ref": "#/components/schemas/MirrorDestination"
          },
          "mirror-direction": {
            "type": "string",
            "enum": [
              "tx",
              "rx",
              "both"
            ],
            "description": "Direction of the Mirror Service Session",
            "example": "tx | rx | both"
          },
          "dev-state": {
            "type": "string",
            "enum": [
              "provisioned",
              "provisioning-failed",
              "not-provisioned"
            ],
            "description": "Device State of the Mirror Service Session",
            "example": "provisioned | provisioning-failed | not-provisioned",
            "readOnly": true
          },
          "app-state": {
            "type": "string",
            "enum": [
              "cfg-ready",
              "cfg-in-sync",
              "cfg-refreshed",
              "cfg-refresh-err"
            ],
            "description": "Application State of the Mirror Service Session",
            "example": "cfg-ready | cfg-in-sync | cfg-refreshed | cfg-refresh-err",
            "readOnly": true
          }
        }
      },
      "Span": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "description": "Destination Interface Device Management IP Address of the Mirror Service Session",
            "example": "10.25.25.100"
          },
          "if-type": {
            "type": "string",
            "enum": [
              "eth",
              "po"
            ],
            "description": "Destination Interface Type of the Mirror Service Session",
            "example": "eth | po"
          },
          "if-name": {
            "type": "string",
            "description": "Destination Interface Name of the Mirror Service Session",
            "example": "0/1"
          }
        }
      },
      "MirrorDestination": {
        "type": "object",
        "description": "Destination of the Mirror Service Session",
        "properties": {
          "destination-type": {
            "type": "string",
            "enum": [
              "span",
              "rspan",
              "erspan"
            ],
            "description": "Destination Type of the Mirror Service Session",
            "example": "span | rspan | erspan"
          },
          "span": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Span"
            },
            "description": "This represents the Local SPAN where in the Mirror Source and the Mirror Destination reside on the same switching hardware."
          }
        }
      },
      "MirrorSource": {
        "type": "object",
        "description": "Source of the Mirror Service Session",
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "description": "Source Interface Device Management IP Address of the Mirror Service Session",
            "example": "10.25.25.100"
          },
          "if-type": {
            "type": "string",
            "enum": [
              "eth",
              "po",
              "vlan",
              "ve"
            ],
            "description": "Source Interface Type of the Mirror Service Session",
            "example": "eth | po | vlan | ve"
          },
          "if-name": {
            "type": "string",
            "description": "Source Interface Name of the Mirror Service Session",
            "example": "0/1"
          }
        }
      },
      "MirrorServiceSessionList": {
        "type": "object",
        "description": "List of the Mirror Service Session",
        "required": [
          "tenant_name"
        ],
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "mirror-service-session-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MirrorServiceSession"
            }
          }
        }
      },
      "MirrorServiceSessionError": {
        "type": "object",
        "description": "Mirror Service Session Error",
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "description": "Device Management IP Address"
          },
          "mirror-service-session-error-list": {
            "type": "array",
            "description": "List of the Mirror Service Session Error",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          },
          "rollback-error-list": {
            "type": "array",
            "description": "List of the Mirror Service Session Rollback Error",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "BgpServicePeerGroupConfigList": {
        "type": "object",
        "required": [
          "name",
          "tenant_name"
        ],
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "bgp-service-peer-group-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpServicePeerGroup"
            }
          }
        }
      },
      "BGPServicePeerGroupConfigUpdate": {
        "type": "object",
        "required": [
          "tenant_name",
          "operation"
        ],
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "operation": {
            "type": "string",
            "enum": [
              "peer-group-add",
              "peer-group-delete",
              "desc-update"
            ],
            "example": "peer-group-add | peer-group-delete | desc-update"
          },
          "bgp-service-peer-group-update": {
            "$ref": "#/components/schemas/BgpServicePeerGroup"
          }
        }
      },
      "BgpServicePeerGroup": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "readOnly": true,
            "type": "integer",
            "description": "Unique ID of the BGP Peer-Group generated by the service. User API can not pass this for create operation.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Unique name of the BGP Peer-Group",
            "example": "bgp-peer-group-1"
          },
          "state": {
            "type": "string",
            "enum": [
              "bgp-pg-init",
              "bgp-pg-created",
              "bgp-pg-delete-pending",
              "bgp-pg-peer-group-delete-pending"
            ],
            "description": "State of the BGP Peer-Group",
            "example": "bgp-pg-init | bgp-pg-created | bgp-pg-delete-pending | bgp-pg-peer-group-delete-pending",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description about BGP Peer-Group",
            "example": "bgp-peer-group-ext-gw1"
          },
          "bgp-service-peer-group": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpServicePeerGroupConfig"
            }
          },
          "error": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpPeerGroupError"
            }
          }
        }
      },
      "BgpPeerGroupError": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string"
          },
          "bgp-peer-group-config-error-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          },
          "rollback-error-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "BgpServicePeerGroupConfig": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "example": "10.25.25.100"
          },
          "peer-group-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpPeerGroup"
            }
          }
        }
      },
      "BgpPeerGroup": {
        "type": "object",
        "properties": {
          "peer-group-name": {
            "type": "string",
            "example": "bgp-peer-group-1",
            "description": "Peer-Group Name"
          },
          "remote-as": {
            "type": "integer",
            "format": "int64",
            "example": 65000,
            "description": "ASN of the neighbor"
          },
          "bfd-enable": {
            "type": "boolean",
            "example": true,
            "description": "Enable/disable BFD"
          },
          "bfd-interval": {
            "type": "integer",
            "example": 300,
            "description": "BFD desired min transmit interval in milliseconds"
          },
          "bfd-rx": {
            "type": "integer",
            "example": 300,
            "description": "BFD required min receive interval in milliseconds"
          },
          "bfd-multiplier": {
            "type": "integer",
            "example": 5,
            "description": "BFD time multiplier"
          },
          "next-hop-self": {
            "type": "string",
            "enum": [
              true,
              false,
              "always"
            ],
            "example": true,
            "description": "Enable/disable the next hop calculation for this neighbor"
          },
          "update-source-type": {
            "type": "string",
            "enum": [
              "ip"
            ],
            "example": "ip",
            "description": "Update source type"
          },
          "update-source-value": {
            "type": "string",
            "example": "192.168.1.1",
            "description": "Update source value"
          },
          "md5-password": {
            "type": "string",
            "example": "password",
            "description": "md5 password"
          },
          "encrypted-md5-password": {
            "type": "string",
            "example": "$9$MCgKGaNt6OASX68/7TC6Lw==",
            "description": "encrypted md5 password - read only parameter",
            "readOnly": true
          },
          "remove-private-as": {
            "type": "boolean",
            "example": true,
            "description": "Enable/disable remove-private-as for the BGP Peer-Group"
          },
          "dev-state": {
            "type": "string",
            "enum": [
              "provisioned",
              "provisioning-failed",
              "not-provisioned"
            ],
            "description": "Device State of the BGP Peer-Group",
            "example": "provisioned | provisioning-failed | not-provisioned",
            "readOnly": true
          },
          "app-state": {
            "type": "string",
            "enum": [
              "cfg-ready",
              "cfg-in-sync",
              "cfg-refreshed",
              "cfg-refresh-err"
            ],
            "description": "Application State of the BGP Peer-Group",
            "example": "cfg-ready | cfg-in-sync | cfg-refreshed | cfg-refresh-err",
            "readOnly": true
          }
        }
      },
      "BGPPeerList": {
        "type": "object",
        "required": [
          "name",
          "tenant_name"
        ],
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "peer-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpPeer"
            }
          }
        }
      },
      "BgpPeerUpdate": {
        "type": "object",
        "required": [
          "tenant_name",
          "operation"
        ],
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "operation": {
            "type": "string",
            "enum": [
              "peer-add",
              "peer-delete",
              "desc-update"
            ],
            "example": "peer-add | peer-delete | desc-update"
          },
          "peer-list": {
            "$ref": "#/components/schemas/BgpPeer"
          }
        }
      },
      "BgpPeer": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "readOnly": true,
            "type": "integer",
            "description": "Unique ID of the BGP Peer generated by the service. User API can not pass this for create operation",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Unique name of the BGP Peer",
            "example": "bgp-peer-1"
          },
          "tenantName": {
            "type": "string",
            "description": "Tenant to which this BGP Peer-Group belongs",
            "example": "Tenant-1"
          },
          "state": {
            "type": "string",
            "enum": [
              "bgp-peer-init",
              "bgp-peer-created",
              "bgp-peer-delete-pending",
              "bgp-peer-peer-delete-pending"
            ],
            "description": "State of the BGP Peer",
            "example": "bgp-peer-init | bgp-peer-created | bgp-peer-delete-pending | bgp-peer-peer-delete-pending",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description about BGP Peer",
            "example": "bgp-peer-ext-gw1"
          },
          "peer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpPeerVrfList"
            }
          },
          "error": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpPeerError"
            }
          }
        }
      },
      "BgpPeerVrfList": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "example": "10.25.25.100"
          },
          "vrf-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VrfPeerConfig"
            }
          }
        }
      },
      "VrfPeerConfig": {
        "type": "object",
        "properties": {
          "vrf": {
            "type": "string",
            "description": "Vrf to which these networks are attached",
            "example": "VRF-GREEN"
          },
          "afi": {
            "type": "string",
            "description": "Address family identifier",
            "example": "ipv4 | ipv6"
          },
          "safi": {
            "type": "string",
            "example": "unicast",
            "description": "Sub Address family identifier"
          },
          "af-ip-neighbor": {
            "type": "array",
            "description": "IP address family neighbors",
            "items": {
              "$ref": "#/components/schemas/BGPIPNeighbor"
            }
          },
          "af-ip-dynamic-neighbor": {
            "type": "array",
            "description": "IP address family dynamic neighbors",
            "items": {
              "$ref": "#/components/schemas/BGPIPDynamicNeighbor"
            }
          }
        }
      },
      "BGPIPNeighbor": {
        "type": "object",
        "properties": {
          "neighbor-address": {
            "type": "string",
            "example": "10.25.25.100",
            "description": "IP address of the neighbor"
          },
          "remote-as": {
            "type": "integer",
            "format": "int64",
            "example": 65000,
            "description": "ASN of the neighbor"
          },
          "next-hop-self": {
            "type": "string",
            "enum": [
              true,
              false,
              "always"
            ],
            "example": "true | false | always",
            "description": "Next Hop Self configuration of the neighbor"
          },
          "update-source-ip": {
            "type": "string",
            "example": "10.25.25.100",
            "description": "Update source IP configuration of the neighbor"
          },
          "bfd-enable": {
            "type": "boolean",
            "example": true,
            "description": "Enable/disable BFD"
          },
          "bfd-interval": {
            "type": "integer",
            "example": 300,
            "description": "BFD desired min transmit interval in milliseconds"
          },
          "bfd-rx": {
            "type": "integer",
            "example": 300,
            "description": "BFD required min receive interval in milliseconds"
          },
          "bfd-multiplier": {
            "type": "integer",
            "example": 5,
            "description": "BFD time multiplier"
          },
          "md5-password": {
            "type": "string",
            "example": "password",
            "description": "md5 password"
          },
          "encrypted-md5-password": {
            "type": "string",
            "example": "$9$MCgKGaNt6OASX68/7TC6Lw==",
            "description": "encrypted md5 password - read only parameter",
            "readOnly": true
          },
          "remove-private-as": {
            "type": "boolean",
            "example": true,
            "description": "Enable/disable remove-private-as for the neighbor"
          },
          "default-originate": {
            "type": "boolean",
            "example": true,
            "description": "Enable/disable default route originate for the neighbor"
          },
          "default-originate-route-map": {
            "type": "string",
            "example": "routeMap1",
            "description": "Default route originate route map for the neighbor"
          },
          "prefix-list": {
            "type": "array",
            "description": "IP Prefix List for the neighbor",
            "items": {
              "$ref": "#/components/schemas/PrefixList"
            }
          },
          "route-map": {
            "type": "array",
            "description": "Route Map for the neighbor",
            "items": {
              "$ref": "#/components/schemas/RouteMap"
            }
          },
          "dev-state": {
            "type": "string",
            "enum": [
              "provisioned",
              "provisioning-failed",
              "not-provisioned"
            ],
            "description": "Device State of the BGP Neighbor",
            "example": "provisioned | provisioning-failed | not-provisioned",
            "readOnly": true
          },
          "app-state": {
            "type": "string",
            "enum": [
              "cfg-ready",
              "cfg-in-sync",
              "cfg-refreshed",
              "cfg-refresh-err"
            ],
            "description": "Application State of the BGP Neighbor",
            "example": "cfg-ready | cfg-in-sync | cfg-refreshed | cfg-refresh-err",
            "readOnly": true
          }
        }
      },
      "BGPIPDynamicNeighbor": {
        "type": "object",
        "properties": {
          "listen-range": {
            "type": "string",
            "example": "10.10.10.10/24",
            "description": "Listen range of the neighbor"
          },
          "peer-group-name": {
            "type": "string",
            "example": "pg1",
            "description": "Peer-Group configured on the device"
          },
          "listen-limit": {
            "type": "integer",
            "example": 10,
            "description": "Listen limit"
          },
          "dev-state": {
            "type": "string",
            "enum": [
              "provisioned",
              "provisioning-failed",
              "not-provisioned"
            ],
            "description": "Device State of the BGP Neighbor",
            "example": "provisioned | provisioning-failed | not-provisioned",
            "readOnly": true
          },
          "app-state": {
            "type": "string",
            "enum": [
              "cfg-ready",
              "cfg-in-sync",
              "cfg-refreshed",
              "cfg-refresh-err"
            ],
            "description": "Application State of the BGP Neighbor",
            "example": "cfg-ready | cfg-in-sync | cfg-refreshed | cfg-refresh-err",
            "readOnly": true
          }
        }
      },
      "BgpPeerError": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string"
          },
          "bgp-peer-config-error-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          },
          "rollback-error-list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "PrefixList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "ipprefix1",
            "description": "Name of the IP prefix list"
          },
          "direction": {
            "type": "string",
            "description": "Direction of the IP prefix list",
            "enum": [
              "in",
              "out"
            ],
            "example": "in"
          }
        }
      },
      "RouteMap": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "routeMap1",
            "description": "Name of the route map"
          },
          "direction": {
            "type": "string",
            "description": "Direction of the route map",
            "enum": [
              "in",
              "out"
            ],
            "example": "out"
          }
        }
      },
      "OperationalBgpPeerResponse": {
        "type": "object",
        "properties": {
          "items": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationalBgpPeerItem"
            }
          },
          "Error": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "items": [
            {
              "tenant-name": "tenant-name",
              "vrf-name": "vrf-name",
              "destination-device-router-id": "destination-device-router-id",
              "destination-device-ip": "destination-device-ip",
              "bgp-session-state": "IDLE",
              "source-device-ip": "source-device-ip",
              "source-device-router-id": "source-device-router-id",
              "source-device-asn": "source-device-asn",
              "destination-device-asn": "destination-device-asn"
            },
            {
              "tenant-name": "tenant-name",
              "vrf-name": "vrf-name",
              "destination-device-router-id": "destination-device-router-id",
              "destination-device-ip": "destination-device-ip",
              "bgp-session-state": "IDLE",
              "source-device-ip": "source-device-ip",
              "source-device-router-id": "source-device-router-id",
              "source-device-asn": "source-device-asn",
              "destination-device-asn": "destination-device-asn"
            }
          ]
        }
      },
      "OperationalBgpPeerItem": {
        "type": "object",
        "properties": {
          "tenant-name": {
            "type": "string",
            "description": "Name of the tenant"
          },
          "vrf-name": {
            "type": "string",
            "description": "Name of the Vrf present on device"
          },
          "source-device-ip": {
            "type": "string",
            "description": "Management IP Address of the source device"
          },
          "source-device-router-id": {
            "type": "string",
            "description": "Router ID of the source device"
          },
          "source-device-asn": {
            "type": "integer",
            "format": "int64",
            "description": "ASN of the source device"
          },
          "destination-device-ip": {
            "type": "string",
            "description": "Management IP Address of the destination device"
          },
          "destination-device-router-id": {
            "type": "string",
            "description": "Router ID of the source device"
          },
          "destination-device-asn": {
            "type": "integer",
            "format": "int64",
            "description": "ASN of the source device"
          },
          "bgp-session-state": {
            "type": "string",
            "description": "Indicates the (BGP-EVPN) session state established between the source and destination router id",
            "enum": [
              "IDLE",
              "CONNECT",
              "ACTIVE",
              "OPENSENT",
              "OPENCONFIRM",
              "ESTABLISHED"
            ]
          },
          "neighbor-afi": {
            "type": "string",
            "description": "Indicates the neighbor afi state",
            "enum": [
              "IPV4",
              "IPV6",
              "L2VPN",
              "VPNV4",
              "VPNV6"
            ]
          },
          "neighbor-safi": {
            "type": "string",
            "description": "Indicates the neighbor safi state",
            "enum": [
              "UNICAST",
              "EVPN"
            ]
          }
        },
        "example": {
          "destination-device-router-id": "destination-device-router-id",
          "destination-device-ip": "destination-device-ip",
          "bgp-session-state": "IDLE",
          "neighbor-afi": "ipv4",
          "neighbor-safi": "unicast",
          "source-device-ip": "source-device-ip",
          "source-device-router-id": "source-device-router-id",
          "source-device-asn": "source-device-asn",
          "destination-device-asn": "destination-device-asn"
        }
      },
      "LocalIpAddress": {
        "type": "object",
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "example": "10.10.10.10"
          },
          "ip-address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpAddress"
            }
          }
        }
      },
      "IpAddress": {
        "type": "object",
        "properties": {
          "afi": {
            "type": "string",
            "description": "Address family identifier",
            "example": "ipv4 | ipv6"
          },
          "ip-address": {
            "type": "string",
            "description": "IPv4 or IPv6 Address",
            "example": "20.0.0.0/24 | 2001:1::/64"
          }
        }
      },
      "DeviceResponse": {
        "type": "object",
        "properties": {
          "ip_address": {
            "type": "string",
            "example": "10.25.25.100",
            "description": "Device Management IP Address"
          },
          "role": {
            "type": "string",
            "description": "Role of the device",
            "example": "Leaf"
          },
          "state": {
            "type": "string",
            "enum": [
              "READY",
              "Inventory-Event-In-Progress"
            ],
            "description": "State of the Device",
            "example": "READY | Inventory-Event-In-Progress"
          },
          "result": {
            "type": "string",
            "description": "result for the device",
            "example": "success"
          }
        },
        "title": "device response",
        "example": {
          "ip_address": "10.25.25.100",
          "role": "Spine",
          "state": "READY",
          "status": "Success"
        }
      },
      "HealthStatus": {
        "type": "object",
        "required": [
          "Service",
          "MessageBus"
        ],
        "properties": {
          "Service": {
            "type": "string"
          },
          "MessageBus": {
            "type": "string"
          }
        }
      },
      "VrfDelete": {
        "type": "object",
        "properties": {
          "tenant_name": {
            "type": "string",
            "description": "Tenant Name",
            "example": "Tenant-A"
          },
          "vrf-name-list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "VRF-GREEN",
              "VRF-RED"
            ],
            "description": "List of VRFs."
          }
        }
      },
      "LockList": {
        "type": "object",
        "properties": {
          "lock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Lock"
            }
          }
        }
      },
      "Lock": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "service",
              "device",
              "port",
              "vlan",
              "vrf",
              "epg"
            ],
            "readOnly": true,
            "description": "Type of the object which is locked",
            "example": "service | device | port | vlan | vrf | epg"
          },
          "device-ip": {
            "type": "string",
            "readOnly": true,
            "description": "Device Management IP Address to which the lock object belongs to",
            "example": "10.25.25.100"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the object which is locked",
            "example": "0/1"
          },
          "reason": {
            "type": "string",
            "readOnly": true,
            "description": "Reason for which object is locked",
            "example": "backup"
          }
        }
      },
      "BgpNetworkRoute": {
        "type": "object",
        "required": [
          "mgmt-ip",
          "network-list"
        ],
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "description": "Device Management IP Address",
            "example": "10.25.25.100"
          },
          "network-list": {
            "type": "array",
            "description": "List of bgp network routes to be advertised to the BGP peers.",
            "items": {
              "$ref": "#/components/schemas/BgpNetworkRouteProp"
            }
          }
        }
      },
      "BgpNetworkRouteProp": {
        "type": "object",
        "required": [
          "afi",
          "network"
        ],
        "properties": {
          "afi": {
            "type": "string",
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "example": "ipv4 | ipv6",
            "description": "Address family identifier"
          },
          "network": {
            "type": "string",
            "example": "20.0.0.0/24 | 2001:1::/64",
            "description": "Bgp advertises given network address."
          },
          "backdoor": {
            "type": "boolean",
            "example": "true | false",
            "description": "By Default Disabled.  Increases the administrative distance of eBGP with the goal of making IGP learned routes preferred for given network address"
          },
          "route_map": {
            "type": "string",
            "example": "rm1",
            "description": "Routemap is used to set the BGP attributes for the given network address like MED etc"
          },
          "weight": {
            "type": "string",
            "example": 30,
            "description": "Weight is used to set the BGP weight attribute for the given network address"
          }
        }
      },
      "BgpStaticNetwork": {
        "type": "object",
        "required": [
          "mgmt-ip",
          "static-network-list"
        ],
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "description": "Device Management IP Address",
            "example": "10.25.25.100"
          },
          "static-network-list": {
            "type": "array",
            "description": "List of bgp static networks and its attributes.",
            "items": {
              "$ref": "#/components/schemas/BgpStaticNetworkProp"
            }
          }
        }
      },
      "BgpStaticNetworkProp": {
        "type": "object",
        "required": [
          "afi",
          "network"
        ],
        "properties": {
          "afi": {
            "type": "string",
            "enum": [
              "ipv4"
            ],
            "example": "ipv4",
            "description": "Address family identifier"
          },
          "network": {
            "type": "string",
            "example": "11.20.30.40/30",
            "description": "Static network with prefix"
          },
          "distance": {
            "type": "integer",
            "example": 3,
            "description": "Static network distance"
          }
        }
      },
      "BgpAggregateAddress": {
        "type": "object",
        "required": [
          "mgmt-ip",
          "aggregate-address-list"
        ],
        "properties": {
          "mgmt-ip": {
            "type": "string",
            "description": "Device Management IP Address",
            "example": "10.25.25.100"
          },
          "aggregate-address-list": {
            "type": "array",
            "description": "List of bgp aggregated-address routes and its attributes.",
            "items": {
              "$ref": "#/components/schemas/BgpAggregateAddressProp"
            }
          }
        }
      },
      "BgpAggregateAddressProp": {
        "type": "object",
        "required": [
          "afi",
          "aggregated-address"
        ],
        "properties": {
          "afi": {
            "type": "string",
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "example": "ipv4 | ipv6",
            "description": "Address family identifier"
          },
          "aggregated-address": {
            "type": "string",
            "example": "20.0.0.0/24 | 2001:1::/64",
            "description": "Aggregated address with prefix."
          },
          "summary-only": {
            "type": "boolean",
            "example": "true | false",
            "description": "By default disabled. If enabled, only aggregated-address will be advertised."
          },
          "as-set": {
            "type": "boolean",
            "example": "true | false",
            "description": "By default disabled. If enabled, the AS set path information will be part of aggregate-address advertisement."
          },
          "addvertise-map": {
            "type": "string",
            "example": "routeMap1",
            "description": "Route map used to filter the BGP attributes (AS paths and communities) to be advertised as part of aggregate-address."
          },
          "suppress-map": {
            "type": "string",
            "example": "routeMap1",
            "description": "Route map used to suppress the specific routes to be advertised along with the aggregate-address advertisement."
          }
        }
      }
    }
  }
}